imports:
  UTCTime: Kernel.Prelude
  ShortId: Kernel.Types.Id
  HighPrecMoney: Kernel.Types.Common
  Currency: Kernel.Types.Common
  Price: Kernel.Types.Common
  PaymentOrder: Lib.Payment.Domain.Types.PaymentOrder
  AccountDetailsType : Kernel.External.Payout.Juspay.Types.Payout
  EntityName : Lib.Payment.Domain.Types.Common
  EncryptedHashedField: Kernel.External.Encryption
  DbHash: Kernel.External.Encryption


PaymentOrderSplit:
  tableName: payment_order_split
  derives: "Generic"
  fields:
    id : Id PaymentOrderSplit
    paymentOrderId : Id PaymentOrder
    vendorId : Text
    amount : Price
    mdrBorneBy: Text
    merchantCommission: Price
    merchantId: Text
    merchantOperatingCityId : Maybe Text
    createdAt : UTCTime
    updatedAt : UTCTime

  constraints:
    id: PrimaryKey
    paymentOrderId: SecondaryKey

  beamFields:
    amount:
      currency: Maybe Currency
      price: HighPrecMoney
    merchantCommission:
      merchantCommission: HighPrecMoney

  fromTType:
    amount: Kernel.Types.Common.mkPrice currency price|E
    merchantCommission: Kernel.Types.Common.mkPrice currency merchantCommission|E

  toTType:
    price: (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I
    merchantCommission: (.amount)|I

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findByPaymentOrder:
      kvFunction: findAllWithKV
      where: paymentOrderId

  defaultQueryTypeConstraint: "(Lib.Payment.Storage.Beam.BeamFlow.BeamFlow m r)"
  beamInstance: MakeTableInstancesGenericSchema


PaymentOrderOffer:
  tableName: payment_order_offer
  derives: "Generic"
  fields:
    id : Id PaymentOrderOffer
    paymentOrderId : Id PaymentOrder
    offer_id : Text
    offer_code : Text
    status: Text
    responseJSON: Text
    merchantId: Text
    merchantOperatingCityId: Text
    createdAt : UTCTime
    updatedAt : UTCTime

  constraints:
    id: PrimaryKey
    paymentOrderId: SecondaryKey

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findByPaymentOrder:
      kvFunction: findAllWithKV
      where: paymentOrderId

  defaultQueryTypeConstraint: "(Lib.Payment.Storage.Beam.BeamFlow.BeamFlow m r)"
  beamInstance: MakeTableInstancesGenericSchema
