imports:
  Person: Domain.Types.Person
  Role: Domain.Types.Person
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  UTCTime: Kernel.Prelude
  EncryptedHashedField: Kernel.External.Encryption
  DbHash: Kernel.External.Encryption
  VehicleVariant: Domain.Types.VehicleVariant
  VehicleCategory: Domain.Types.VehicleCategory
  Value: Data.Aeson
  DocumentType: Domain.Types.DocumentVerificationConfig
  Image: Domain.Types.Image
  DriverOnboardingError: Tools.Error
  VerificationStatus: Kernel.Types.Documents
  BaseUrl: Servant.Client.Core
  showBaseUrl: Kernel.Prelude
  parseBaseUrl: Kernel.Prelude
  AccountId: Kernel.External.Payment.Stripe.Types
  ImageExtractionValidation: Domain.Types.IdfyVerification
  MediaFileDocumentType: Domain.Types.Common

IdfyVerification:
  tableName: idfy_verification
  fields:
    id: Id IdfyVerification
    documentImageId1: Id Image
    documentImageId2: Maybe (Id Image)
    driverId: Id Person
    requestId: Text
    docType: DocumentType
    vehicleCategory: Maybe VehicleCategory
    status: Text
    issueDateOnDoc: Maybe UTCTime
    driverDateOfBirth: Maybe UTCTime
    documentNumber: EncryptedHashedField e Text
    imageExtractionValidation: ImageExtractionValidation
    idfyResponse: Maybe Text
    multipleRC: Maybe Bool
    retryCount: Maybe Int
    airConditioned: Maybe Bool
    oxygen: Maybe Bool
    ventilator: Maybe Bool
    nameOnCard: Maybe Text
  beamInstance: MakeTableInstancesWithTModifier [("multipleRC", "multiple_r_c")]
  types:
    ImageExtractionValidation:
      enum: "Success,Skipped,Failed"
  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
    requestId: SecondaryKey
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllByDriverId:
      kvFunction: findAllWithKV
      where: driverId
    findAllByDriverIdAndDocType:
      kvFunction: findAllWithKV
      where:
        and: [driverId, docType]
    findLatestByDriverIdAndDocType:
      kvFunction: findAllWithOptionsKV
      where:
        and: [driverId, docType]
    findByRequestId:
      kvFunction: findOneWithKV
      where: requestId
    updateResponse:
      kvFunction: updateWithKV
      params: [status, idfyResponse]
      where: requestId
    updateStatus:
      kvFunction: updateWithKV
      params: [status]
      where: requestId
    updateExtractValidationStatus:
      kvFunction: updateWithKV
      params: [imageExtractionValidation]
      where: requestId
    deleteByPersonId:
      kvFunction: deleteWithKV
      where: driverId

AadhaarOtpVerify:
  tableName: aadhaar_otp_verify
  fields:
    id: Id AadhaarOtpVerify
    driverId: Id Person
    requestId: Text
    statusCode: Text
    transactionId: Text
    requestMessage: Text
  excludedFields: [merchantOperatingCityId, merchantId]
  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
  queries:
    deleteByPersonId:
      kvFunction: deleteWithKV
      where: driverId

AadhaarOtpReq:
  tableName: aadhaar_otp_req
  fields:
    id: Id AadhaarOtpReq
    driverId: Id Person
    requestId: Text
    statusCode: Text
    transactionId: Maybe Text
    requestMessage: Text
  excludedFields: [merchantOperatingCityId, merchantId]
  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
  queries:
    deleteByPersonId:
      kvFunction: deleteWithKV
      where: driverId

DriverLicense:
  tableName: driver_license
  fields:
    id: Id DriverLicense
    driverId: Id Person
    documentImageId1: Id Image
    documentImageId2: Maybe (Id Image)
    driverDob: Maybe UTCTime
    driverName: Maybe Text
    licenseNumber: EncryptedHashedField e Text
    licenseExpiry: UTCTime
    classOfVehicles: "[Text]"
    failedRules: "[Text]"
    verificationStatus: VerificationStatus
    vehicleCategory: Maybe VehicleCategory
    consent: Bool
    consentTimestamp: UTCTime
    dateOfIssue: Maybe UTCTime
    rejectReason: Maybe Text
  excludedFields: [merchantOperatingCityId]

  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
    licenseNumberHash: "!SecondaryKey" # forcing to be a secondary key
    documentImageId1: SecondaryKey

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findByDriverId:
      kvFunction: findOneWithKV
      where: driverId
    deleteByDriverId:
      kvFunction: deleteWithKV
      where: driverId
    updateVerificationStatus:
      kvFunction: updateWithKV
      params: [verificationStatus]
      where: documentImageId1
  extraOperations:
    - EXTRA_QUERY_FILE

VehicleRegistrationCertificate:
  tableName: vehicle_registration_certificate
  fields:
    id: Id VehicleRegistrationCertificate
    documentImageId: Id Image
    certificateNumber: EncryptedHashedField e Text
    unencryptedCertificateNumber: Maybe Text
    fitnessExpiry: UTCTime
    permitExpiry: Maybe UTCTime
    pucExpiry: Maybe UTCTime
    insuranceValidity: Maybe UTCTime
    vehicleClass: Maybe Text
    vehicleVariant: Maybe VehicleVariant|NoRelation
    failedRules: "[Text]"
    vehicleManufacturer: Maybe Text
    vehicleCapacity: Maybe Int
    vehicleModel: Maybe Text
    manufacturerModel: Maybe Text
    vehicleColor: Maybe Text
    vehicleEnergyType: Maybe Text
    vehicleDoors: Maybe Int
    vehicleSeatBelts: Maybe Int
    reviewedAt: Maybe UTCTime
    reviewRequired: Maybe Bool
    verificationStatus: VerificationStatus
    fleetOwnerId: Maybe Text
    airConditioned: Maybe Bool
    oxygen: Maybe Bool
    ventilator: Maybe Bool
    luggageCapacity: Maybe Int
    mYManufacturing: Maybe Day
    vehicleRating: Maybe Double
    userPassedVehicleCategory: Maybe VehicleCategory
    vehicleModelYear: Maybe Int
    dateOfRegistration: Maybe UTCTime
    rejectReason: Maybe Text
    approved: Maybe Bool
  default:
    approved: "false"
  constraints:
    id: PrimaryKey
    certificateNumberHash: "!SecondaryKey" # forcing to be a secondary key
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    updateFleetOwnerId:
      kvFunction: updateWithKV
      params: [fleetOwnerId]
      where: id
    findByRCIdAndFleetOwnerId:
      kvFunction: findOneWithKV
      where:
        and: [id, fleetOwnerId]
    findAllByFleetOwnerId:
      kvFunction: findAllWithOptionsKV
      where: fleetOwnerId
      orderBy: updatedAt
    updateAirConditioned:
      kvFunction: updateOneWithKV
      params: [airConditioned]
      where: id
    updateOxygen:
      kvFunction: updateWithKV
      params: [oxygen]
      where: id
    updateVentilator:
      kvFunction: updateWithKV
      params: [ventilator]
      where: id
    updateManufacturing:
      kvFunction: updateWithKV
      params: [mYManufacturing]
      where: id
    updateVerificationStatus:
      kvFunction: updateOneWithKV
      params: [verificationStatus]
      where: documentImageId
    findByImageId:
      kvFunction: findOneWithKV
      where: documentImageId
    updateApproved:
      kvFunction: updateOneWithKV
      params: [approved]
      where: id
  extraOperations:
    - EXTRA_QUERY_FILE

DriverRCAssociation:
  tableName: driver_rc_association
  fields:
    id: Id DriverRCAssociation
    driverId: Id Person
    rcId: Id VehicleRegistrationCertificate
    associatedOn: UTCTime
    associatedTill: Maybe UTCTime
    consent: Bool
    consentTimestamp: UTCTime
    isRcActive: Bool
  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
    rcId: SecondaryKey
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    deleteByDriverId:
      kvFunction: deleteWithKV
      where: driverId
    findActiveAssociationByRC:
      kvFunction: findOneWithKV
      where:
        and: [rcId, isRcActive]
    findActiveAssociationByDriver:
      kvFunction: findOneWithKV
      where:
        and: [driverId, isRcActive]
    deactivateRCForDriver:
      kvFunction: updateWithKV
      params: [isRcActive]
      where:
        and: [driverId, rcId]
  extraOperations:
    - EXTRA_QUERY_FILE

Image:
  tableName: image
  types:
    SelfieFetchStatus:
      enum: "APPROVED,NEEDS_REVIEW"
      derive: "ToParamSchema"
  fields:
    id: Id Image
    personId: Id Person
    merchantId: Id Merchant
    merchantOperatingCityId: Maybe (Id MerchantOperatingCity)
    s3Path: Text
    imageType: DocumentType
    failureReason: Maybe DriverOnboardingError
    rcId: Maybe Text
    verificationStatus: Maybe VerificationStatus
    workflowTransactionId: Maybe Text
    reviewerEmail: Maybe Text
    documentExpiry: Maybe UTCTime
  constraints:
    id: PrimaryKey
    personId: SecondaryKey
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findImagesByPersonAndType:
      kvFunction: findAllWithKV
      where:
        and: [merchantId, personId, imageType]
      orderBy:
        field: createdAt
        order: desc
    findByMerchantId:
      kvFunction: findAllWithDb
      where: merchantId
    findAllByRcId:
      kvFunction: findAllWithKV
      where: rcId
    addFailureReason:
      kvFunction: updateWithKV
      params: [failureReason]
      where: id
    deleteByPersonId:
      kvFunction: deleteWithKV
      where: personId
    findByWrokflowTransactionId:
      kvFunction: findAllWithKV
      where: workflowTransactionId
    updateVerificationStatus:
      kvFunction: updateWithKV
      params: [verificationStatus, reviewerEmail, updatedAt]
      where: workflowTransactionId
    updateDocumentExpiry:
      kvFunction: updateOneWithKV
      params: [documentExpiry]
      where: id
    updateVerificationStatusAndExpiry:
      kvFunction: updateOneWithKV
      params: [verificationStatus, documentExpiry, imageType]
      where: id
    deleteById:
      kvFunction: deleteWithKV
      where: id
  extraOperations:
    - EXTRA_QUERY_FILE
  domainInstance:
    - Custom Kernel.Utils.TH.mkHttpInstancesForEnum <SelfieFetchStatus>

MediaFileDocument:
  tableName: media_file_document
  types:
    MediaFileDocumentStatus:
      enum: "PENDING, DELETED, FAILED, CONFIRMED, COMPLETED"
  fields:
    id: Id MediaFileDocument
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    s3Path: Text
    uploadLink: Maybe Text
    mediaFileDocumentType: MediaFileDocumentType
    rcId: Id VehicleRegistrationCertificate
    creatorId: Id Person
    status: MediaFileDocumentStatus
    fileHash: Maybe Text

  queries:
    findAllByMerchantOpCityIdAndRcIdAndType:
      kvFunction: findAllWithOptionsKV
      where:
        and: [merchantOperatingCityId, rcId, mediaFileDocumentType]
      orderBy:
        field: createdAt
        order: desc
    findOneByCityRcTypeAndStatus:
      kvFunction: findOneWithKV
      where:
        and:
          - eq: [merchantOperatingCityId, rcId, mediaFileDocumentType]
          - in: [status]
    updateStatus:
      kvFunction: updateOneWithKV
      params: [status, fileHash]
      where: id
    deleteById:
      kvFunction: deleteWithKV
      where: id
  extraOperations:
    - EXTRA_QUERY_FILE


DocumentVerificationConfig:
  tableName: document_verification_config
  types:
    VehicleClassVariantMap:
      vehicleClass: Text
      vehicleCapacity: Maybe Int
      vehicleVariant: VehicleVariant
      manufacturer: Maybe Text
      manufacturerModel: Maybe Text
      vehicleModel: Maybe Text
      reviewRequired: Maybe Bool
      bodyType: Maybe Text
      priority: Maybe Int
      derive: "Eq, Ord, Read"
    SupportedVehicleClasses:
      enum: "DLValidClasses [Text],RCValidClasses [VehicleClassVariantMap]"
    DocumentType:
      enum: "DriverLicense,VehicleRegistrationCertificate,Permissions,SubscriptionPlan,ProfilePhoto,AadhaarCard,PanCard,VehiclePermit,VehicleFitnessCertificate,VehicleInsurance,VehiclePUC,ProfileDetails,SocialSecurityNumber,VehicleInspectionForm,UploadProfile,GSTCertificate,BackgroundVerification,VehicleFront,VehicleBack,VehicleRight,VehicleLeft,VehicleFrontInterior,VehicleBackInterior,VehicleNOC,BusinessLicense,Odometer,InspectionHub"
    VehicleClassCheckType:
      enum: "Infix,Prefix,Suffix"
    DocumentCategory:
      enum: "Driver,Vehicle,Permission,Training"
  fields:
    merchantOperatingCityId: Id MerchantOperatingCity
    merchantId: Id Merchant
    vehicleCategory: VehicleCategory|NoRelation
    documentType: DocumentType
    title: Text
    description: Maybe Text
    isMandatory: Bool
    isDisabled: Bool
    disableWarning: Maybe Text
    isHidden: Bool
    dependencyDocumentType: "[DocumentType]"
    checkExtraction: Bool
    checkExpiry: Bool
    supportedVehicleClasses: SupportedVehicleClasses
    vehicleClassCheckType: VehicleClassCheckType
    rcNumberPrefixList: "[Text]"
    maxRetryCount: Int
    isDefaultEnabledOnManualVerification: Bool
    isImageValidationRequired: Bool
    doStrictVerifcation: Bool
    order: Int
    filterForOldApks: Maybe Bool
    documentCategory: Maybe DocumentCategory
  default:
    order: "0"
    doStrictVerifcation: "true"
    isDefaultEnabledOnManualVerification: "true"
    isImageValidationRequired: "true"
    filterForOldApks: false
  constraints:
    merchantOperatingCityId: PrimaryKey
    vehicleCategory: PrimaryKey
    documentType: PrimaryKey
  sqlType:
    dependencyDocumentType: text[]
    supportedVehicleClassesJSON: json
  beamFields:
    supportedVehicleClasses:
      supportedVehicleClassesJSON: Value
  toTType:
    supportedVehicleClassesJSON: getConfigJSON
  fromTType:
    supportedVehicleClasses: (getConfigFromJSON documentType)|M
  queries:
    findAllByMerchantOpCityId:
      kvFunction: findAllWithOptionsKV
      where: merchantOperatingCityId
      orderBy:
        field: order
        order: asc
  extraOperations:
    - EXTRA_QUERY_FILE

VehiclePermit:
  tableName: vehicle_permit
  fields:
    id: Id VehiclePermit
    rcId: Id VehicleRegistrationCertificate
    driverId: Id Person
    documentImageId: Id Image
    permitNumber: EncryptedHashedField e Text
    permitExpiry: UTCTime
    regionCovered: Text
    nameOfPermitHolder: Maybe Text
    issueDate: Maybe UTCTime
    purposeOfJourney: Maybe Text
    verificationStatus: VerificationStatus
  constraints:
    id: PrimaryKey
    rcId: SecondaryKey
  queries:
    findByRcIdAndDriverId:
      kvFunction: findAllWithKV
      where:
        and: [rcId, driverId]
    updateVerificationStatusByImageId:
      kvFunction: updateOneWithKV
      params: [verificationStatus]
      where: documentImageId
    findByImageId:
      kvFunction: findOneWithKV
      where: documentImageId

VehicleInsurance:
  tableName: vehicle_insurance
  fields:
    id: Id VehicleInsurance
    rcId: Id VehicleRegistrationCertificate
    driverId: Id Person
    documentImageId: Id Image
    policyNumber: EncryptedHashedField e Text
    policyExpiry: UTCTime
    policyProvider: Text
    insuredName: Maybe Text
    issueDate: Maybe UTCTime
    limitsOfLiability: Maybe Text
    verificationStatus: VerificationStatus
    rejectReason: Maybe Text
  constraints:
    id: PrimaryKey
    documentImageId: SecondaryKey
  queries:
    findByRcIdAndDriverId:
      kvFunction: findAllWithKV
      where:
        and: [rcId, driverId]
    updateVerificationStatus:
      kvFunction: updateOneWithKV
      params: [verificationStatus]
      where: documentImageId
    findByImageId:
      kvFunction: findOneWithKV
      where: documentImageId
  extraOperations:
    - EXTRA_QUERY_FILE

VehicleFitnessCertificate:
  tableName: vehicle_fitness_certificate
  fields:
    id: Id VehicleFitnessCertificate
    rcId: Id VehicleRegistrationCertificate
    driverId: Id Person
    documentImageId: Id Image
    applicationNumber: EncryptedHashedField e Text
    fitnessExpiry: UTCTime
    inspectingAuthority: Maybe Text
    receiptDate: Maybe UTCTime
    inspectingOn: Maybe UTCTime
    nextInspectionDate: Maybe UTCTime
    categoryOfVehicle: Maybe Text
    verificationStatus: VerificationStatus
  queries:
    findByRcIdAndDriverId:
      kvFunction: findAllWithKV
      where:
        and: [rcId, driverId]
    updateVerificationStatus:
      kvFunction: updateOneWithKV
      params: [verificationStatus]
      where: documentImageId
    findByImageId:
      kvFunction: findOneWithKV
      where: documentImageId
  constraints:
    id: PrimaryKey
    rcId: SecondaryKey
    documentImageId: SecondaryKey

VehicleNOC:
  tableName: vehicle_noc
  fields:
    id: Id VehicleNOC
    nocNumber: EncryptedHashedField e Text
    rcId: Id VehicleRegistrationCertificate
    driverId: Id Person
    documentImageId: Id Image
    nocExpiry: UTCTime
    verificationStatus: VerificationStatus
  constraints:
    id: PrimaryKey
    rcId: SecondaryKey
    documentImageId: SecondaryKey
  queries:
    findByRcIdAndDriverId:
      kvFunction: findAllWithKV
      where:
        and: [rcId, driverId]
    findByImageId:
      kvFunction: findOneWithKV
      where: documentImageId
    updateVerificationStatusByImageId:
      kvFunction: updateOneWithKV
      params: [verificationStatus]
      where: documentImageId

BusinessLicense:
  tableName: business_license
  fields:
    id: Id BusinessLicense
    licenseNumber: EncryptedHashedField e Text
    driverId: Id Person
    documentImageId: Id Image
    licenseExpiry: UTCTime
    verificationStatus: VerificationStatus
  constraints:
    id: PrimaryKey
    documentImageId: SecondaryKey
  queries:
    findByPersonId:
      kvFunction: findAllWithKV
      where: driverId
    findByImageId:
      kvFunction: findOneWithKV
      where: documentImageId
    updateVerificationStatusByImageId:
      kvFunction: updateOneWithKV
      params: [verificationStatus]
      where: documentImageId

VehiclePUC:
  tableName: vehicle_puc
  fields:
    id: Id VehiclePUC
    pucNumber: Maybe (EncryptedHashedField e Text)
    rcId: Id VehicleRegistrationCertificate
    driverId: Id Person
    documentImageId: Id Image
    pucExpiry: UTCTime
    verificationStatus: VerificationStatus
    testDate: Maybe UTCTime
  constraints:
    id: PrimaryKey
    rcId: SecondaryKey
  queries:
    findByRcIdAndDriverId:
      kvFunction: findAllWithKV
      where:
        and: [rcId, driverId]
    findByImageId:
      kvFunction: findOneWithKV
      where: documentImageId
    updateVerificationStatusByImageId:
      kvFunction: updateOneWithKV
      params: [verificationStatus]
      where: documentImageId

  beamFields:
    pucNumber:
      pucNumberEncrypted: Maybe Text
      pucNumberHash: Maybe DbHash

  fromTType:
    pucNumber: EncryptedHashed <$> (Encrypted <$> pucNumberEncrypted) <*> pucNumberHash|E

  toTType:
    pucNumberEncrypted: (pucNumber <&> unEncrypted . (.encrypted))|E
    pucNumberHash: (pucNumber <&> (.hash))|E

FleetRCAssociation:
  tableName: fleet_rc_association
  fields:
    id: Id FleetRCAssociation
    fleetOwnerId: Id Person
    rcId: Id VehicleRegistrationCertificate
    associatedOn: UTCTime
    associatedTill: Maybe UTCTime
  constraints:
    id: PrimaryKey
    rcId: "!SecondaryKey" # forcing to be a secondary key
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
  extraOperations:
    - EXTRA_QUERY_FILE

DriverSSN:
  tableName: driver_ssn
  fields:
    id: Id DriverSSN
    driverId: Id Person
    ssn: EncryptedHashedField e Text
    verificationStatus: VerificationStatus
    rejectReason: Maybe Text
  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
    ssnHash: "!SecondaryKey" # forcing to be a secondary key
  queries:
    findByDriverId:
      kvFunction: findOneWithKV
      where: driverId
  extraOperations:
    - EXTRA_QUERY_FILE
  excludedFields: [merchantId, merchantOperatingCityId, createdAt, updatedAt]

DriverPanCard:
  tableName: driver_pan_card
  types:
    VerifiedBy:
      enum: "FRONTEND_SDK,DASHBOARD,DASHBOARD_ADMIN,DASHBOARD_USER"
    PanType:
      enum: "INDIVIDUAL,BUSINESS"
  fields:
    id: Id DriverPanCard
    driverId: Id Person
    documentImageId1: Id Image
    documentImageId2: Maybe (Id Image)
    driverDob: Maybe UTCTime
    driverName: Maybe Text
    panCardNumber: EncryptedHashedField e Text
    failedRules: "[Text]"
    verificationStatus: VerificationStatus
    consent: Bool
    consentTimestamp: UTCTime
    verifiedBy: Maybe Domain.Types.DriverPanCard.VerifiedBy
    merchantOperatingCityId: Maybe (Id MerchantOperatingCity)
    docType: Maybe PanType
    driverNameOnGovtDB: Maybe Text
  excludedFields: [merchantOperatingCityId]
  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
    panCardNumberHash: "!SecondaryKey" # forcing to be a secondary key
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findByDriverId:
      kvFunction: findOneWithKV
      where: driverId
    deleteByDriverId:
      kvFunction: deleteWithKV
      where: driverId
    updateVerificationStatus:
      kvFunction: updateWithKV
      params: [verificationStatus, updatedAt]
      where: driverId
    findByImageId:
      kvFunction: findOneWithKV
      where: documentImageId1
    findByEncryptedPanNumber:
      kvFunction: findOneWithKV
      where: panCardNumberHash|B
    updateVerificationStatusByImageId:
      kvFunction: updateOneWithKV
      params: [verificationStatus]
      where: documentImageId1
  extraOperations:
    - EXTRA_QUERY_FILE

DriverGstin:
  fields:
    id: Id DriverGstin
    driverId: Id Person
    documentImageId1: Id Image
    documentImageId2: Maybe (Id Image)
    dateOfLiability: Maybe UTCTime
    driverName: Maybe Text
    gstin: EncryptedHashedField e Text
    verificationStatus: VerificationStatus
    address: Maybe Text
    panNumber: Maybe Text
    constitutionOfBusiness: Maybe Text
    isProvisional: Maybe Bool
    legalName: Maybe Text
    tradeName: Maybe Text
    typeOfRegistration: Maybe Text
    validFrom: Maybe UTCTime
    validUpto: Maybe UTCTime
    verifiedBy: Maybe Domain.Types.DriverPanCard.VerifiedBy
    merchantOperatingCityId: Maybe (Id MerchantOperatingCity)
  excludedFields: [merchantOperatingCityId]
  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
    gstin: "!SecondaryKey" # forcing to be a secondary key
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findByDriverId:
      kvFunction: findOneWithKV
      where: driverId
    deleteByDriverId:
      kvFunction: deleteWithKV
      where: driverId
    updateVerificationStatus:
      kvFunction: updateWithKV
      params: [verificationStatus, updatedAt]
      where: driverId
    findByImageId:
      kvFunction: findOneWithKV
      where: documentImageId1
    findByEncryptedGstin:
      kvFunction: findOneWithKV
      where: gstinHash|B
    updateVerificationStatusByImageId:
      kvFunction: updateOneWithKV
      params: [verificationStatus]
      where: documentImageId1
  extraOperations:
    - EXTRA_QUERY_FILE

DriverBankAccount:
  tableName: driver_bank_account
  fields:
    driverId: Id Person
    accountId: AccountId
    chargesEnabled: Bool
    detailsSubmitted: Bool
    currentAccountLink: Maybe BaseUrl
    currentAccountLinkExpiry: Maybe UTCTime
  constraints:
    driverId: PrimaryKey
    accountId: "!SecondaryKey" # forcing to be a secondary key
  beamType:
    currentAccountLink: Maybe Text
  toTType:
    currentAccountLink: Kernel.Prelude.fmap showBaseUrl|I
  fromTType:
    currentAccountLink: Kernel.Prelude.mapM parseBaseUrl|MI
  queries:
    updateAccountLink:
      kvFunction: updateOneWithKV
      params: [currentAccountLink, currentAccountLinkExpiry]
      where: driverId
    updateAccountStatus:
      kvFunction: updateOneWithKV
      params: [chargesEnabled, detailsSubmitted]
      where: driverId
  extraOperations:
    - EXTRA_QUERY_FILE

FleetOwnerDocumentVerificationConfig:
  tableName: fleet_owner_document_verification_config
  fields:
    merchantOperatingCityId: Id MerchantOperatingCity
    merchantId: Id Merchant
    documentType: DocumentType
    title: Text
    description: Maybe Text
    isMandatory: Bool
    isDisabled: Bool
    disableWarning: Maybe Text
    isHidden: Bool
    dependencyDocumentType: "[DocumentType]"
    isDefaultEnabledOnManualVerification: Bool
    isImageValidationRequired: Bool
    checkExtraction: Bool
    checkExpiry: Bool
    maxRetryCount: Int
    doStrictVerifcation: Bool
    order: Int
    role: Role
    documentCategory: Maybe Domain.Types.DocumentVerificationConfig.DocumentCategory
  default:
    order: "0"
    role: "'FLEET_OWNER'"
  constraints:
    merchantOperatingCityId: PrimaryKey
    documentType: PrimaryKey
    role: PrimaryKey
  sqlType:
    dependencyDocumentType: text[]
  queries:
    findAllByMerchantOpCityId:
      kvFunction: findAllWithOptionsKV
      where: merchantOperatingCityId
      orderBy:
        field: order
        order: asc
    findAllByMerchantOpCityIdAndRole:
      kvFunction: findAllWithKV
      where:
        and: [merchantOperatingCityId, role]

AadhaarCard:
  tableName: aadhaar_card
  fields:
    driverId: Id Person
    aadhaarFrontImageId: Maybe (Id Image)
    aadhaarBackImageId: Maybe (Id Image)
    maskedAadhaarNumber: Maybe Text
    aadhaarNumberHash: Maybe DbHash
    nameOnCard: Maybe Text
    driverGender: Maybe Text
    dateOfBirth: Maybe Text
    address: Maybe Text
    consent: Bool
    consentTimestamp: UTCTime
    driverImage: Maybe Text
    driverImagePath: Maybe Text
    verificationStatus: VerificationStatus
    merchantOperatingCityId: Id MerchantOperatingCity
    merchantId: Id Merchant
    createdAt: UTCTime
    updatedAt: UTCTime
  derives: "Generic,Show,ToJSON,FromJSON"
  constraints:
    driverId: PrimaryKey
  queries:
    findByFrontImageId:
      kvFunction: findOneWithKV
      where: aadhaarFrontImageId
    findByBackImageId:
      kvFunction: findOneWithKV
      where: aadhaarBackImageId
    updateVerificationStatus:
      kvFunction: updateWithKV
      params: [verificationStatus, updatedAt]
      where: driverId
    deleteByPersonId:
      kvFunction: deleteWithKV
      where: driverId
    findByAadhaarNumberHash:
      kvFunction: findOneWithKV
      where: aadhaarNumberHash
    findByPhoneNumberAndUpdate:
      kvFunction: updateWithKV
      params:
        [
          nameOnCard,
          driverGender,
          dateOfBirth,
          aadhaarNumberHash,
          verificationStatus,
        ]
      where: driverId
    updateDriverImagePath:
      kvFunction: updateOneWithKV
      params: [driverImagePath]
      where: driverId
  extraOperations:
    - EXTRA_QUERY_FILE

BackgroundVerification:
  tableName: background_verification
  fields:
    driverId: Id Person
    candidateId: Text
    invitationId: Text
    invitationUrl: BaseUrl
    reportId: Maybe Text
    expiresAt: UTCTime
    invitationStatus: VerificationStatus
    reportStatus: VerificationStatus
    merchantOperatingCityId: Id MerchantOperatingCity
    merchantId: Id Merchant
  constraints:
    driverId: PrimaryKey
  beamType:
    invitationUrl: Text
  toTType:
    invitationUrl: showBaseUrl|I
  fromTType:
    invitationUrl: parseBaseUrl|MI
  queries:
    findByDriverId:
      kvFunction: findOneWithKV
      where: driverId
    updateInvitationStatus:
      kvFunction: updateOneWithKV
      params: [invitationStatus]
      where: driverId
    updateReportStatus:
      kvFunction: updateOneWithKV
      params: [reportStatus]
      where: driverId
    updateReportId:
      kvFunction: updateOneWithKV
      params: [reportId]
      where: driverId
  extraOperations:
    - EXTRA_QUERY_FILE

HyperVergeSdkLogs:
  tableName: hyperverge_sdk_logs
  fields:
    txnId: Text
    hvFlowId: Maybe Text
    driverId: Id Person
    docType: Maybe DocumentType
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    status: Maybe Text
    callbackResponse: Maybe Text
    failureReason: Maybe Text
    createdAt: UTCTime
    updatedAt: UTCTime
  constraints:
    txnId: PrimaryKey
    driverId: SecondaryKey
  queries:
    findAllByDriverId:
      kvFunction: findAllWithKV
      where: driverId
    findAllByDriverIdAndDocType:
      kvFunction: findAllWithKV
      where:
        and: [driverId, docType]
      orderBy:
        field: createdAt
        order: asc

HyperVergeVerification:
  tableName: hyperverge_verification
  fields:
    id: Id HyperVergeVerification
    documentImageId1: Id Image
    documentImageId2: Maybe (Id Image)
    driverId: Id Person
    requestId: Text
    docType: DocumentType
    vehicleCategory: Maybe VehicleCategory
    status: Text
    issueDateOnDoc: Maybe UTCTime
    driverDateOfBirth: Maybe UTCTime
    documentNumber: EncryptedHashedField e Text
    imageExtractionValidation: ImageExtractionValidation
    hypervergeResponse: Maybe Text
    multipleRC: Maybe Bool
    retryCount: Maybe Int
    airConditioned: Maybe Bool
    oxygen: Maybe Bool
    ventilator: Maybe Bool
    nameOnCard: Maybe Text
    transactionId: Maybe Text
  constraints:
    id: PrimaryKey
    driverId: SecondaryKey
    requestId: SecondaryKey
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllByDriverId:
      kvFunction: findAllWithKV
      where: driverId
    findAllByDriverIdAndDocType:
      kvFunction: findAllWithKV
      where:
        and: [driverId, docType]
    findLatestByDriverIdAndDocType:
      kvFunction: findAllWithOptionsKV
      where:
        and: [driverId, docType]
    findByRequestId:
      kvFunction: findOneWithKV
      where: requestId
    updateResponse:
      kvFunction: updateWithKV
      params: [status, hypervergeResponse]
      where: requestId
    updateStatus:
      kvFunction: updateWithKV
      params: [status]
      where: requestId
    updateExtractValidationStatus:
      kvFunction: updateWithKV
      params: [imageExtractionValidation]
      where: requestId
    deleteByPersonId:
      kvFunction: deleteWithKV
      where: driverId

RCValidationRules:
  tableName: rc_validation_rules
  fields:
    id: Id RCValidationRules
    maxVehicleAge: Maybe Int
    fuelType: Maybe [Text]
    vehicleClass: Maybe [Text]
    vehicleOEM: Maybe [Text]
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
  constraints:
    id: PrimaryKey
  queries:
    findByCityId:
      kvFunction: findOneWithKV
      where: merchantOperatingCityId
