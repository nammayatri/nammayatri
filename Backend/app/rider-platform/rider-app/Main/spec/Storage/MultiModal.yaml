imports:
  SearchRequest: Domain.Types.SearchRequest
  MultimodalTravelMode: Domain.Types.Common
  Price: Kernel.Types.Common
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  EncryptedHashedField: Kernel.External.Encryption
  Currency: Kernel.Types.Common
  Location: Domain.Types.Location
  Person: Domain.Types.Person
  JourneySearchData: Lib.JourneyLeg.Types
  PolylinePoints: Kernel.External.Maps.Google.MapsClient.Types
  LatLngV2: Kernel.External.Maps.Google.MapsClient.Types
  MultiModalStopDetails: Kernel.External.MultiModal.Interface.Types
  MultiModalAgency: Kernel.External.MultiModal.Interface.Types
  MultiModalLegGate: Kernel.External.MultiModal.Interface.Types
  RecentLocation: Domain.Types.RecentLocation
  ServiceTierType: BecknV2.FRFS.Enums
  PaymentOrder: Lib.Payment.Domain.Types.PaymentOrder
  AbsoluteDirection: Kernel.External.MultiModal.OpenTripPlanner.Types
  Value: Data.Aeson
  JourneyLegStatus: Lib.JourneyLeg.Types
  RouteDetails: Domain.Types.RouteDetails
  TrackingStatus: Lib.JourneyModule.State.Types

# add journeyLegId (Maybe (Id JourneyLeg)) in SearchRequest
Journey:
  tableName: journey

  types:
    JourneyStatus:
      enum: "NEW, INITIATED, CONFIRMED, INPROGRESS, CANCELLED, FEEDBACK_PENDING, COMPLETED, FAILED, EXPIRED"
      derive: "ToParamSchema"

  fields:
    id: Id Journey
    searchRequestId: Text
    riderId: Id Person
    startTime: Maybe UTCTime
    endTime: Maybe UTCTime
    estimatedDistance: Distance
    estimatedDuration: Maybe Seconds
    modes: "[MultimodalTravelMode]"
    convenienceCost: Int
    status: JourneyStatus
    totalLegs: Int
    isPaymentSuccess : Maybe Bool
    recentLocationId: Maybe (Id RecentLocation)
    relevanceScore: Maybe Double
    hasPreferredServiceTier: Maybe Bool
    hasPreferredTransitModes: Maybe Bool
    fromLocation: Location
    toLocation: Maybe Location
    isPublicTransportIncluded: Maybe Bool
    paymentOrderShortId: Maybe (ShortId PaymentOrder)
    journeyExpiryTime: Maybe UTCTime
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity

  beamType:
    status: Maybe JourneyStatus

  beamFields:
    fare:
      fare: Maybe HighPrecMoney
      currency: Maybe Currency
    estimatedDistance:
      estimatedDistance: HighPrecDistance
      distanceUnit: DistanceUnit
    fromLocation:
      fromLocationId: Maybe Text
      fromLocationAddress: Maybe Text
    toLocation:
      toLocationId: Maybe Text
      toLocationAddress: Maybe Text

  fromTType:
    fromLocation: Storage.Queries.Transformers.Journey.getLocation fromLocationId fromLocationAddress|EM
    toLocation: Just <$> Storage.Queries.Transformers.Journey.getLocation toLocationId toLocationAddress|EM
    estimatedDistance: (Kernel.Types.Common.Distance estimatedDistance distanceUnit)|E
    status: (fromMaybe Domain.Types.Journey.NEW status)|E

  toTType:
    fromLocationId: (Just $ Kernel.Types.Id.getId ((.id) fromLocation))|E
    toLocationId: (Kernel.Types.Id.getId <$> (toLocation <&> (.id)))|E
    fromLocationAddress: Nothing|E
    toLocationAddress: Nothing|E
    estimatedDistance: ((.value))|I
    distanceUnit: ((.unit))|I
    status: (Just status)|E

  constraints:
    id: PrimaryKey
    searchRequestId: "!SecondaryKey"
    riderId: "!SecondaryKey"

  queries:
    findBySearchId:
      kvFunction: findAllWithKV
      where: searchRequestId
    updateStatus:
        kvFunction: updateOneWithKV
        params: [status]
        where: id
    updatePaymentOrderShortId:
        kvFunction: updateOneWithKV
        params: [paymentOrderShortId, isPaymentSuccess]
        where: id

  domainInstance:
    - Custom Kernel.Utils.TH.mkHttpInstancesForEnum <JourneyStatus>

  sqlType:
    modes: "text[]"
    fromLocationId: character varying(36)
    toLocationId: character varying(36)

  extraOperations:
    - EXTRA_QUERY_FILE

  default:
    riderId: "''" # default value for backward compatibility

#passenger details
JourneyBooking:
  fields:
    id: Id JourneyBooking
    journeyId: Id Journey
    fare: Maybe Price
    estimatedFare: Maybe Price
    estimatedDistance: Distance
    estimatedDuration: Maybe Seconds
    modes: "[MultimodalTravelMode]"
    numberOfPassengers: Int
    convenienceCost: Int
    isBookingCancellable: Bool
    customerCancelled: Bool

  beamFields:
    fare:
      fare: Maybe HighPrecMoney
      currency: Maybe Currency
    estimatedDistance:
      estimatedDistance: HighPrecDistance
      distanceUnit: DistanceUnit

  beamType:
    estimatedFare: Maybe HighPrecMoney

  fromTType:
    fare: ((Kernel.Types.Common.mkPrice currency) <$> fare)|E
    estimatedFare: ((Kernel.Types.Common.mkPrice currency) <$> estimatedFare)|E
    estimatedDistance: (Kernel.Types.Common.Distance estimatedDistance distanceUnit)|E

  toTType:
    fare: (Kernel.Prelude.fmap (.amount))|I
    currency: (Kernel.Prelude.fmap (.currency))|I
    estimatedFare: (Kernel.Prelude.fmap (.amount))|I
    estimatedDistance: ((.value))|I
    distanceUnit: ((.unit))|I

  constraints:
    id: PrimaryKey
    journeyId: "!SecondaryKey"

# use booking, FRFS booking and bus booking for journey leg booking and attach the journey booking id there
PassengerDetails:
  fields:
    id: Id PassengerDetails
    bookingId: Text
    firstName: Text
    lastName: Maybe Text
    age: Maybe Int

WalkLegMultimodal:
  tableName: walk_leg_multimodal

  derives: "Generic, Show"

  types:
    WalkLegStatus:
      enum: "InPlan, Ongoing, Finishing, Completed"

  fields:
    id: Id WalkLegMultimodal
    startTime: UTCTime
    # validTill: UTCTime
    riderId: Id Person
    fromLocation: Location
    toLocation: Maybe Location
    estimatedDistance: Maybe Distance
    estimatedDuration: Maybe Seconds
    status: WalkLegStatus
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    # clientDevice: Maybe Device
    journeyLegInfo: Maybe JourneySearchData
    journeyLegId: Maybe (Id JourneyLeg)
    journeyRouteDetails: Maybe RouteDetails

  sqlType:
    toLocationId: character varying(36)
    fromLocationId: character varying(36)

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    updateStatus:
      kvFunction: updateOneWithKV
      params: [status]
      where: id

  beamFields:
    estimatedDistance:
      estimatedDistance: Maybe HighPrecDistance
      distanceUnit: Maybe DistanceUnit
    fromLocation:
      fromLocationId: Maybe Text
    toLocation:
      toLocationId: Maybe Text
    journeyLegInfo:
      journeyLegOrder: Maybe Int
      journeyId: Maybe Text
      agency: Maybe Text
      skipBooking: Maybe Bool
      convenienceCost: Maybe Int
      pricingId: Maybe Text
      isDeleted: Maybe Bool
      onSearchFailed: Maybe Bool
    journeyRouteDetails: {}

  intermediateTransformers:
    fromTType:
      - journeyRouteDetails': Storage.Queries.Transformers.RouteDetails.getJourneyRouteDetails id journeyLegId|EM

  fromTType:
    estimatedDistance: (Kernel.Types.Common.Distance <$> estimatedDistance <*> distanceUnit)|E
    fromLocation: Storage.Queries.Transformers.MultiModal.getFromLocation id|EM
    toLocation: Storage.Queries.Transformers.MultiModal.getToLocation id|EM
    journeyLegInfo: Storage.Queries.Transformers.MultiModal.mkJourneyLegInfo
    journeyRouteDetails: listToMaybe journeyRouteDetails'|E

  toTType:
    estimatedDistance: (.value) <$> |I
    distanceUnit: (.unit) <$> |I
    fromLocationId: (Just $ Kernel.Types.Id.getId ((.id) fromLocation))|E
    toLocationId: (Kernel.Types.Id.getId <$> (toLocation <&> (.id)))|E
    journeyLegOrder: Kernel.Prelude.fmap (.journeyLegOrder)|I
    journeyId: Kernel.Prelude.fmap (.journeyId)|I
    agency: (journeyLegInfo >>= (.agency))|E
    skipBooking: Kernel.Prelude.fmap (.skipBooking)|I
    convenienceCost: Kernel.Prelude.fmap (.convenienceCost)|I
    pricingId: (journeyLegInfo >>= (.pricingId))|E
    isDeleted: (journeyLegInfo >>= (.isDeleted))|E
    onSearchFailed: (journeyLegInfo >>= (.onSearchFailed))|E

  extraOperations:
    - EXTRA_QUERY_FILE

MultimodalPreferences:
  tableName: multimodal_preferences

  derives: "Generic, Show"

  types:
    JourneyOptionsSortingType:
      enum: "FASTEST, CHEAPEST, MINIMUM_TRANSITS, MOST_RELEVANT"

  fields:
    personId: Id Person
    allowedTransitModes: "[MultimodalTravelMode]"
    journeyOptionsSortingType: JourneyOptionsSortingType
    busTransitTypes: "Maybe [ServiceTierType]"
    subwayTransitTypes: "Maybe [ServiceTierType]"

  queries:
    findByPersonId:
      kvFunction: findOneWithKV
      where: personId
    updateUserPreferences:
      kvFunction: updateWithKV
      params: [allowedTransitModes, journeyOptionsSortingType, busTransitTypes, subwayTransitTypes]
      where: personId

  sqlType:
    allowedTransitModes: text[]
    journeyOptionsSortingType: text
    busTransitTypes: text[]
    subwayTransitTypes: text[]

  constraints:
    personId: PrimaryKey

JourneyLeg:
  fields:
    id: Id JourneyLeg
    journeyId: Id Journey
    duration: Maybe Seconds
    distance: Maybe Distance
    # polylinePoints: PolylinePoints     #to see    #Polyline.encodedPolyline
    mode: MultimodalTravelMode
    startLocation: LatLngV2 #LocationV2     #Location.latLng
    endLocation: LatLngV2 #LocationV2
    fromStopDetails: Maybe MultiModalStopDetails
    toStopDetails: Maybe MultiModalStopDetails
    routeDetails: "[RouteDetails]"
    agency: Maybe MultiModalAgency
    fromArrivalTime: Maybe UTCTime
    fromDepartureTime: Maybe UTCTime
    estimatedMinFare: Maybe HighPrecMoney
    estimatedMaxFare: Maybe HighPrecMoney
    toArrivalTime: Maybe UTCTime
    toDepartureTime: Maybe UTCTime
    sequenceNumber: Int
    serviceTypes: Maybe [ServiceTierType]
    legSearchId: Maybe Text
    isDeleted: Maybe Bool
    changedBusesInSequence: "Maybe [Text]"
    finalBoardedBusNumber: Maybe Text
    isSkipped: Maybe Bool
    entrance: Maybe MultiModalLegGate
    exit: Maybe MultiModalLegGate
    straightLineEntrance: Maybe MultiModalLegGate
    straightLineExit: Maybe MultiModalLegGate
    osmEntrance: Maybe MultiModalLegGate
    osmExit: Maybe MultiModalLegGate
    status: Maybe JourneyLegStatus

  sqlType:
    serviceTypes: text[]
    entrance: "json"
    exit: "json"
    straightLineEntrance: "json"
    straightLineExit: "json"
    osmEntrance: "json"
    osmExit: "json"

  beamType:
    entrance: Maybe Value
    exit: Maybe Value
    straightLineEntrance: Maybe Value
    straightLineExit: Maybe Value
    osmEntrance: Maybe Value
    osmExit: Maybe Value

  beamFields:
    distance:
      distance: Maybe HighPrecDistance
      distanceUnit: Maybe DistanceUnit
    fromStopDetails:
      fromStopCode: Maybe Text
      fromStopName: Maybe Text
      fromStopGtfsId: Maybe Text
      fromStopPlatformCode: Maybe Text
    toStopDetails:
      toStopCode: Maybe Text
      toStopName: Maybe Text
      toStopGtfsId: Maybe Text
      toStopPlatformCode: Maybe Text
    routeDetails: {}
    agency:
      agencyGtfsId: Maybe Text
      agencyName: Maybe Text
    startLocation:
      startLocationLat: Double
      startLocationLon: Double
    endLocation:
      endLocationLat: Double
      endLocationLon: Double
    legSearchId:
      legId: Maybe Text

  queries:
    findAllByJourneyId:
      kvFunction: findAllWithKV
      where: journeyId
    updateLegSearchId:
      kvFunction: updateOneWithKV
      params: [legSearchId]
      where: id
    updateMode:
      kvFunction: updateOneWithKV
      params: [mode]
      where: id
    updateIsDeleted:
      kvFunction: updateOneWithKV
      params: [isDeleted]
      where: legSearchId
    updateIsSkipped:
      kvFunction: updateOneWithKV
      params: [isSkipped]
      where: legSearchId
    updateDistanceAndDuration:
      kvFunction: updateWithKV
      params: [distance, duration]
      where: id
    findByLegSearchId:
      kvFunction: findOneWithKV
      where: legSearchId
    updateAfterEditLocation:
      kvFunction: updateWithKV
      params: [duration, distance, endLocation]
      where: id
    findByJourneyIdAndSequenceNumber:
      kvFunction: findOneWithKV
      where:
        and: [journeyId, sequenceNumber]
    updateEstimatedFaresByJourneyIdAndSequenceNumber:
      kvFunction: updateWithKV
      params: [estimatedMinFare, estimatedMaxFare]
      where:
        and: [journeyId, sequenceNumber]
    updateEstimatedFaresBySearchId:
      kvFunction: updateWithKV
      params: [estimatedMinFare, estimatedMaxFare]
      where: legSearchId
    updateStatusByJourneyIdAndSequenceNumber:
      kvFunction: updateWithKV
      params: [status]
      where:
        and: [journeyId, sequenceNumber]

  fromTType:
    distance: (Kernel.Types.Common.Distance <$> distance <*> distanceUnit)|E
    fromStopDetails: (Just $ Kernel.External.MultiModal.Interface.Types.MultiModalStopDetails fromStopCode fromStopPlatformCode fromStopName fromStopGtfsId)|E
    toStopDetails: (Just $ Kernel.External.MultiModal.Interface.Types.MultiModalStopDetails toStopCode toStopPlatformCode toStopName toStopGtfsId)|E
    routeDetails: Storage.Queries.RouteDetails.findAllByJourneyLegId id|EM
    agency: (Kernel.External.MultiModal.Interface.Types.MultiModalAgency agencyGtfsId <$> agencyName)|E
    startLocation: Kernel.External.Maps.Google.MapsClient.LatLngV2 startLocationLat startLocationLon|E
    endLocation: Kernel.External.Maps.Google.MapsClient.LatLngV2 endLocationLat endLocationLon|E
    legSearchId: legId|E
    entrance: entrance >>= Kernel.Utils.JSON.valueToMaybe|E
    exit: exit >>= Kernel.Utils.JSON.valueToMaybe|E
    straightLineEntrance: straightLineEntrance >>= Kernel.Utils.JSON.valueToMaybe|E
    straightLineExit: straightLineExit >>= Kernel.Utils.JSON.valueToMaybe|E
    osmEntrance: osmEntrance >>= Kernel.Utils.JSON.valueToMaybe|E
    osmExit: osmExit >>= Kernel.Utils.JSON.valueToMaybe|E

  toTType:
    distance: (.value) <$> |I
    distanceUnit: (.unit) <$> |I
    fromStopCode: (fromStopDetails >>= (.stopCode))|E
    fromStopName: (fromStopDetails >>= (.name))|E
    fromStopPlatformCode: (fromStopDetails >>= (.platformCode))|E
    fromStopGtfsId: ((fromStopDetails >>= (.gtfsId)) <&> Domain.Types.FRFSRouteDetails.gtfsIdtoDomainCode)|E
    toStopCode: (toStopDetails >>= (.stopCode))|E
    toStopName: (toStopDetails >>= (.name))|E
    toStopPlatformCode: (toStopDetails >>= (.platformCode))|E
    toStopGtfsId: ((toStopDetails >>= (.gtfsId)) <&> Domain.Types.FRFSRouteDetails.gtfsIdtoDomainCode)|E
    startLocationLat: (startLocation & (.latitude))|E
    startLocationLon: (startLocation & (.longitude))|E
    endLocationLat: (endLocation & (.latitude))|E
    endLocationLon: (endLocation & (.longitude))|E
    legId: legSearchId|E
    entrance: entrance >>= Just . Data.Aeson.toJSON|E
    exit: exit >>= Just . Data.Aeson.toJSON|E
    straightLineEntrance: straightLineEntrance >>= Just . Data.Aeson.toJSON|E
    straightLineExit: straightLineExit >>= Just . Data.Aeson.toJSON|E
    osmEntrance: osmEntrance >>= Just . Data.Aeson.toJSON|E
    osmExit: osmExit >>= Just . Data.Aeson.toJSON|E
    agencyGtfsId: (agency >>= (.gtfsId))|E
    agencyName: (agency <&> (.name))|E

  excludedDefaultQueries:
    - create

  constraints:
    id: PrimaryKey
    journeyId: "!SecondaryKey"
    legId: "!SecondaryKey"

  extraOperations:
    - EXTRA_QUERY_FILE

RouteDetails:
  fields:
    id: Id RouteDetails
    journeyLegId: Text
    routeGtfsId: Maybe Text
    routeCode: Maybe Text
    routeLongName: Maybe Text
    routeShortName: Maybe Text
    routeColorName: Maybe Text
    routeColorCode: Maybe Text
    alternateShortNames: "[Text]"
    frequency: Maybe Seconds
    agencyGtfsId: Maybe Text
    agencyName: Maybe Text
    subLegOrder: Maybe Int
    # fromStopDetails:
    fromStopCode: Maybe Text
    fromStopName: Maybe Text
    fromStopGtfsId: Maybe Text
    fromStopPlatformCode: Maybe Text
    # toStopDetails:
    toStopCode: Maybe Text
    toStopName: Maybe Text
    toStopGtfsId: Maybe Text
    toStopPlatformCode: Maybe Text
    # Times --
    fromArrivalTime: Maybe UTCTime
    fromDepartureTime: Maybe UTCTime
    toArrivalTime: Maybe UTCTime
    toDepartureTime: Maybe UTCTime
    # startLocation:
    startLocationLat: Double
    startLocationLon: Double
    # endLocation:
    endLocationLat: Double
    endLocationLon: Double
    # Tracking --
    trackingStatus: Maybe TrackingStatus
    journeyStatus: Maybe JourneyLegStatus # TODO :: Remove this field when `trackingStatus` is added to the database and consumed
  queries:
    findAllByJourneyLegId:
      kvFunction: findAllWithKV
      where: journeyLegId
    updateTrackingStatus:
      kvFunction: updateOneWithKV
      params: [trackingStatus]
      where: id
    updateAlternateShortNames:
      kvFunction: updateWithKV
      params: [alternateShortNames]
      where: journeyLegId

  sqlType:
    alternateShortNames: "text[]"

  constraints:
    id: PrimaryKey
    journeyLegId: "!SecondaryKey"

JourneyFeedback:
  fields:
    journeyId: Id Journey
    riderId: Id Person
    rating: Maybe Int
    additionalFeedBack: Maybe Text

  queries:
    findByJourneyId:
      kvFunction: findOneWithKV
      where: journeyId
    findAllByRiderId:
      kvFunction: findAllWithKV
      where: riderId

  constraints:
    journeyId: PrimaryKey
    riderId: SecondaryKey

JourneyLegsFeedbacks:
  fields:
    journeyId: Id Journey
    legOrder: Int
    isExperienceGood: Maybe Bool
    travelMode: Maybe MultimodalTravelMode
    rating: Maybe Int
    feedbackData: Maybe JourneyLegFeedbackData

  types:
    TaxiFeedbackData:
      feedbackDetails: Maybe Text
      wasRideSafe: Maybe Bool
      shouldFavDriver: Maybe Bool
      wasOfferedAssistance: Maybe Bool
      mbAudio: Maybe Text
      derive': "Show, Eq, Ord, Read, Generic, ToJSON, FromJSON, ToSchema"

    SubwayFeedbackData:
      feedbackDetails: Maybe Text
      derive': "Show, Eq, Ord, Read, Generic, ToJSON, FromJSON, ToSchema"

    WalkFeedbackData:
      feedbackDetails: Maybe Text
      derive': "Show, Eq, Ord, Read, Generic, ToJSON, FromJSON, ToSchema"

    BusFeedbackData:
      feedbackDetails: Maybe Text
      derive': "Show, Eq, Ord, Read, Generic, ToJSON, FromJSON, ToSchema"

    MetroFeedbackData:
      feedbackDetails: Maybe Text
      derive': "Show, Eq, Ord, Read, Generic, ToJSON, FromJSON, ToSchema"

    JourneyLegFeedbackData:
      enum: "Taxi TaxiFeedbackData, Bus BusFeedbackData, Walk WalkFeedbackData, Subway SubwayFeedbackData, Metro MetroFeedbackData"
      derive': "Show, Eq, Ord, Read, Generic, ToJSON, FromJSON, ToSchema"

  beamType:
    feedbackData: Maybe Data.Aeson.Value

  fromTType:
    feedbackData: Storage.Queries.Transformers.JourneyLegsFeedback.getFeedbackData =<< feedbackData|E

  toTType:
    feedbackData: Storage.Queries.Transformers.JourneyLegsFeedback.getFeedbackDataJson <$> feedbackData|E

  queries:
    findAllByJourneyId:
      kvFunction: findAllWithKV
      where: journeyId

    findByJourneyIdAndLegOrder:
      kvFunction: findOneWithKV
      where:
        and: [journeyId, legOrder]

  constraints:
    journeyId: PrimaryKey
    legOrder: PrimaryKey

  sqlType:
    feedbackData: json
