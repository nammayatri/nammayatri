imports:
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  Person: Domain.Types.Person
  PassType: Domain.Types.PassType
  PaymentOrder: Lib.Payment.Domain.Types.PaymentOrder
  HighPrecMoney: Kernel.Types.Common
  FRFSVehicleServiceTier: Domain.Types.FRFSVehicleServiceTier
  ServiceTierType: BecknV2.FRFS.Enums

PurchasedPass:
  tableName: purchased_pass

  types:
    StatusType:
      enum: "Pending,Active,PreBooked,Failed,Expired,RefundPending,RefundInitiated,Refunded,RefundFailed"
      derive': "Show, Eq, Ord, Read, Generic, ToJSON, FromJSON, ToSchema, Kernel.Prelude.ToParamSchema"

    BenefitType:
      enum: "FullSaving,FixedSaving,PercentageSaving"
      derive': "Show, Eq, Ord, Read, Generic, ToJSON, FromJSON, ToSchema"

  domainInstance:
    - Custom Kernel.Beam.Lib.UtilsTH.mkBeamInstancesForEnum <StatusType>
    - Custom Kernel.Utils.TH.mkFromHttpInstanceForEnum <StatusType>
    - Custom Kernel.Beam.Lib.UtilsTH.mkBeamInstancesForEnum <BenefitType>
    - Custom Kernel.Utils.TH.mkFromHttpInstanceForEnum <BenefitType>

  fields:
    id: Id PurchasedPass
    passNumber: Int
    personId: Id Person
    startDate: Day
    endDate: Day
    passTypeId: Id PassType
    passCode: Text
    passName: Maybe Text
    passAmount: HighPrecMoney
    benefitDescription: Text
    benefitType: Maybe BenefitType
    benefitValue: Maybe HighPrecMoney
    applicableVehicleServiceTiers: "[ServiceTierType]"
    maxValidTrips: Maybe Int
    maxValidDays: Maybe Int
    usedTripCount: Maybe Int
    status: StatusType
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity

  constraints:
    id: PrimaryKey

  extraOperations:
    - EXTRA_QUERY_FILE

PurchasedPassPayment:
  tableName: purchased_pass_payment

  fields:
    id: Id PurchasedPassPayment
    orderId: Id PaymentOrder
    purchasedPassId: Id PurchasedPass
    startDate: Day
    endDate: Day

  constraints:
    id: PrimaryKey
    orderId: SecondaryKey
    purchasedPassId: SecondaryKey

  queries:
    findOneByPaymentOrderId:
        kvFunction: findOneWithKV
        where: orderId

    findAllByPurchasedPassId:
      kvFunction: findAllWithKV
      where: purchasedPassId

PassVerifyTransaction:
  tableName: pass_verify_transaction

  fields:
    id: Id PassVerifyTransaction
    purchasePassId: Id PurchasedPass
    validTill: UTCTime
    verifiedAt: UTCTime
    fleetId: Text

  constraints:
    id: PrimaryKey
    purchasePassId: SecondaryKey

  queries:
    findAllByPurchasePassId:
      kvFunction: findAllWithKV
      where: purchasePassId

  extraOperations:
    - EXTRA_QUERY_FILE