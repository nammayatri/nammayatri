imports:
  UTCTime: Kernel.Prelude
  TravelMode: Domain.Types.Common
  HighPrecMoney: Kernel.Types.Common
  Currency: Kernel.Types.Common
  Price: Kernel.Types.Common
  Seconds: Kernel.Types.Time
  ShortId: Kernel.Types.Id
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  VehicleCategory: BecknV2.FRFS.Enums
  ServiceTierType: BecknV2.FRFS.Enums
  FRFSSearch: Domain.Types.FRFSSearch
  FRFSQuote: Domain.Types.FRFSQuote
  FRFSTicketBooking: Domain.Types.FRFSTicketBooking
  FRFSTicket: Domain.Types.FRFSTicket
  FRFSTicketBookingPayment: Domain.Types.FRFSTicketBookingPayment
  Station: Domain.Types.Station
  FRFSQuoteType: Domain.Types.FRFSQuote
  FRFSRoutes: Domain.Types.FRFSQuote
  FRFSTicketBookingStatus: Domain.Types.FRFSTicketBooking
  FRFSTicketStatus: Domain.Types.FRFSTicket
  PaymentOrder: Lib.Payment.Domain.Types.PaymentOrder
  Person: Domain.Types.Person
  City: Kernel.Types.Beckn.Context
  PartnerOrganization: Domain.Types.PartnerOrganization
  PartnerOrgTransaction: Domain.Types.PartnerOrganization
  TimeBound: Kernel.Types.TimeBound
  LatLong: Kernel.External.Maps.Types
  JourneySearchData: Lib.JourneyLeg.Types
  Journey: Domain.Types.Journey
  JourneyLegStatus: Lib.JourneyLeg.Types
  StationType: Domain.Types.StationType
  SuggestedStations: Domain.Types.StationType
  MultiModalJourneyRouteDetails: Lib.JourneyLeg.Types
  IntegratedBPPConfig: Domain.Types.IntegratedBPPConfig
  RecentLocation: Domain.Types.RecentLocation
  DayOfWeek: Data.Time
  CrisSearchData: Lib.JourneyLeg.Types

FRFSSearch:
  tableName: frfs_search

  fields:
    id: Id FRFSSearch
    fromStationId: Id Station
    toStationId: Id Station
    routeId: Maybe Text
    quantity: Int
    vehicleType: VehicleCategory
    riderId: Id Person
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    partnerOrgTransactionId: Maybe (Id PartnerOrgTransaction)
    partnerOrgId: Maybe (Id PartnerOrganization)
    journeyLegInfo: Maybe JourneySearchData
    journeyLegStatus: Maybe JourneyLegStatus
    isOnSearchReceived: Maybe Bool
    journeyRouteDetails: "[MultiModalJourneyRouteDetails]"
    integratedBppConfigId: Maybe (Id IntegratedBPPConfig)
    recentLocationId: Maybe (Id RecentLocation)

  beamFields:
    journeyLegInfo:
      journeyLegOrder: Maybe Int
      journeyId: Maybe Text
      agency: Maybe Text
      skipBooking: Maybe Bool
      convenienceCost: Maybe Int
      pricingId: Maybe Text
      isDeleted: Maybe Bool
      onSearchFailed: Maybe Bool
    journeyRouteDetails: {}

  toTType:
    journeyLegOrder: Kernel.Prelude.fmap (.journeyLegOrder)|I
    journeyId: Kernel.Prelude.fmap (.journeyId)|I
    agency: (journeyLegInfo >>= (.agency))|E
    skipBooking: Kernel.Prelude.fmap (.skipBooking)|I
    convenienceCost: Kernel.Prelude.fmap (.convenienceCost)|I
    pricingId: (journeyLegInfo >>= (.pricingId))|E
    isDeleted: (journeyLegInfo >>= (.isDeleted))|E
    onSearchFailed: (journeyLegInfo >>= (.onSearchFailed))|E

  intermediateTransformers:
    fromTType:
      - journeyRouteDetailsList: Storage.Queries.JourneyRouteDetails.findAllBySearchId (Kernel.Types.Id.Id id)|EM

  fromTType:
    journeyLegInfo: mkJourneyLegInfo
    journeyRouteDetails: Storage.Queries.Transformers.RouteDetails.getTransformedJourneyRouteDetailsT journeyRouteDetailsList|E

  excludedDefaultQueries:
    - create

  constraints:
    riderId: "!SecondaryKey" # forcing to be a secondary key

  queries:
    getTicketPlaces:
      kvFunction: findAllWithKV
      where: merchantOperatingCityId
    findById:
      kvFunction: findOneWithKV
      where: id
    updateJourneyLegStatus:
      kvFunction: updateOneWithKV
      params: [journeyLegStatus]
      where: id
    updateIsOnSearchReceivedById:
      kvFunction: updateWithKV
      params: [isOnSearchReceived]
      where: id
    updateRiderIdById:
      kvFunction: updateWithKV
      params: [riderId]
      where: id
  extraOperations:
    - EXTRA_QUERY_FILE

JourneyRouteDetails:
  fields:
    id: Id JourneyRouteDetails
    searchId: Id FRFSSearch
    lineColor: Maybe Text
    lineColorCode: Maybe Text
    platformNumber: Maybe Text
    subLegOrder: Maybe Int
    frequency: Maybe Seconds
    routeLongName: Maybe Text
    alternateShortNames: Maybe [Text]
    fromStationId: Maybe (Id Station)
    toStationId: Maybe (Id Station)
    routeId: Maybe Text
    journeyStatus: Maybe JourneyLegStatus

  queries:
    findAllBySearchId:
      kvFunction: findAllWithKV
      where: searchId
    updateJourneyStatus:
      kvFunction: updateOneWithKV
      params: [journeyStatus]
      where:
        and: [searchId, subLegOrder]
    updateAlternateShortNames:
      kvFunction: updateWithKV
      params: [alternateShortNames]
      where: searchId

  sqlType:
    alternateShortNames: "text[]"

  constraints:
    id: PrimaryKey
    searchId: "!SecondaryKey"

Station:
  tableName: station

  fields:
    id: Id Station
    vehicleType: VehicleCategory
    name: Text
    regionalName: Maybe Text
    hindiName: Maybe Text
    code: Text
    lat: Maybe Double
    lon: Maybe Double
    address: Maybe Text
    merchantId: Id Merchant
    timeBounds: TimeBound
    possibleTypes: Maybe [StationType]
    suggestedDestinations: Maybe [SuggestedStations]
    merchantOperatingCityId: Id MerchantOperatingCity
    integratedBppConfigId: Id IntegratedBPPConfig

  default:
    timeBounds: "'Unbounded'"

  beamType:
    timeBounds: Maybe TimeBound
    suggestedDestinations: Maybe Text

  constraints:
    id: PrimaryKey
    code: SecondaryKey

  fromTType:
    timeBounds: fromMaybe Kernel.Types.TimeBound.Unbounded timeBounds|E
    suggestedDestinations: (Kernel.Utils.Text.decodeFromText =<< suggestedDestinations)|E

  toTType:
    timeBounds: Kernel.Prelude.Just|I
    suggestedDestinations: (Kernel.Utils.Text.encodeToText <$> suggestedDestinations)|E

  queries:
    findAllByVehicleType:
      kvFunction: findAllWithOptionsKV
      where:
        and: [vehicleType, integratedBppConfigId]
    findAllByBppConfigId:
      kvFunction: findAllWithKV
      where:
        and: [integratedBppConfigId]
    findById:
      kvFunction: findOneWithKV
      where: id
    findByStationCode:
      kvFunction: findOneWithKV
      where:
        and: [code, integratedBppConfigId]
    deleteByStationCode:
      kvFunction: deleteWithKV
      where:
        and: [code, integratedBppConfigId]

  extraOperations:
    - EXTRA_QUERY_FILE

FRFSQuote:
  tableName: frfs_quote
  derives: "Generic,Show"
  fields:
    id: Id FRFSQuote
    bppItemId: Text
    searchId: Id FRFSSearch
    _type: FRFSQuoteType
    fromStationId: Id Station
    toStationId: Id Station
    quantity: Int
    stationsJson: Text
    routeStationsJson: Maybe Text
    discountsJson: Maybe Text
    vehicleType: VehicleCategory
    bppSubscriberId: Text
    bppSubscriberUrl: Text
    providerId: Text
    providerName: Text
    providerDescription: Maybe Text
    price: Price
    childPrice: Maybe Price
    estimatedPrice: Maybe Price
    fareDetails: Maybe FRFSFareDetails
    validTill: UTCTime
    riderId: Id Person
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    partnerOrgTransactionId: Maybe (Id PartnerOrgTransaction)
    integratedBppConfigId: Maybe (Id IntegratedBPPConfig)
    partnerOrgId: Maybe (Id PartnerOrganization)
    eventDiscountAmount: Maybe HighPrecMoney
    discountedTickets: Maybe Int
    bppDelayedInterest: Maybe Int
    oldCacheDump: Maybe Text
    childTicketQuantity: Maybe Int
  beamFields:
    price:
      currency: Maybe Currency
      price: HighPrecMoney
    childPrice:
      childPrice: Maybe HighPrecMoney
    estimatedPrice:
      estimatedPrice: Maybe HighPrecMoney
    fareDetails:
      providerRouteId: Maybe Text
      distance: Maybe Meters
      via: Maybe Text
      ticketTypeCode: Maybe Text
      trainTypeCode: Maybe Text
      sdkToken: Maybe Text
      appSession: Maybe Int

  beamType:
    vehicleVariant: Maybe VehicleVariant

  types:
    FRFSQuoteType:
      enum: "SingleJourney, ReturnJourney, Pass, SpecialFareSingleJourney"
    FRFSFareDetails:
      providerRouteId: Text
      distance: Meters
      via: Text
      ticketTypeCode: Text
      trainTypeCode: Text
      sdkToken: Text
      appSession: Int

  fromTType:
    price: Kernel.Types.Common.mkPrice currency price|E
    childPrice: Kernel.Types.Common.mkPrice currency <$> childPrice|E
    estimatedPrice: Kernel.Types.Common.mkPrice currency <$> estimatedPrice|E
    applicableDiscountIds: (Kernel.Types.Id.Id <$> ) <$>|I
    fareDetails: Domain.Types.FRFSQuote.FRFSFareDetails <$> appSession <*> distance <*> providerRouteId <*> sdkToken <*> ticketTypeCode <*> trainTypeCode <*> via|E

  toTType:
    price: (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I
    childPrice: Kernel.Prelude.fmap (.amount)|I
    estimatedPrice: Kernel.Prelude.fmap (.amount)|I
    applicableDiscountIds: (Kernel.Types.Id.getId <$> ) <$>|I
    providerRouteId: (fareDetails <&> (.providerRouteId))|E
    distance: (fareDetails <&> (.distance))|E
    via: (fareDetails <&> (.via))|E
    ticketTypeCode: (fareDetails <&> (.ticketTypeCode))|E
    trainTypeCode: (fareDetails <&> (.trainTypeCode))|E
    sdkToken: (fareDetails <&> (.sdkToken))|E
    appSession: (fareDetails <&> (.appSession))|E

  sqlType:
    applicableDiscountIds: "text[]"

  constraints:
    id: PrimaryKey
    searchId: SecondaryKey

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllBySearchId:
      kvFunction: findAllWithKV
      where: searchId

  extraOperations:
    - EXTRA_QUERY_FILE

FRFSTicketBooking:
  tableName: frfs_ticket_booking
  derives: "Generic, Show"
  fields:
    id: Id FRFSTicketBooking
    searchId: Id FRFSSearch
    bppOrderId: Maybe Text
    quoteId: Id FRFSQuote
    status: FRFSTicketBookingStatus
    riderId: Id Person
    stationsJson: Text
    routeStationsJson: Maybe Text
    discountsJson: Maybe Text
    bppItemId: Text
    _type: FRFSQuoteType
    fromStationId: Id Station
    toStationId: Id Station
    quantity: Int
    childTicketQuantity: Maybe Int
    vehicleType: VehicleCategory
    bppSubscriberId: Text
    bppSubscriberUrl: Text
    providerId: Text
    providerName: Text
    providerDescription: Maybe Text
    price: Price
    estimatedPrice: Price
    finalPrice: Maybe Price
    validTill: UTCTime
    paymentTxnId: Maybe Text
    bppBankAccountNumber: Maybe Text
    bppBankCode: Maybe Text
    cancellationCharges: Maybe HighPrecMoney
    refundAmount: Maybe HighPrecMoney
    isBookingCancellable: Maybe Bool
    customerCancelled: Bool
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    partnerOrgTransactionId: Maybe (Id PartnerOrgTransaction)
    partnerOrgId: Maybe (Id PartnerOrganization)
    discountedTickets: Maybe Int
    eventDiscountAmount: Maybe HighPrecMoney
    payerVpa: Maybe Text
    cashbackStatus: Maybe CashbackStatus
    cashbackPayoutOrderId: Maybe Text
    bppDelayedInterest: Maybe Int
    googleWalletJWTUrl: Maybe Text
    journeyLegOrder: Maybe Int
    journeyId: Maybe (Id Journey)
    journeyOnInitDone: Maybe Bool
    startTime: Maybe UTCTime
    journeyLegStatus: Maybe JourneyLegStatus
    isDeleted: Maybe Bool
    isFareChanged: Maybe Bool
    isSkipped: Maybe Bool
    journeyRouteDetails: "[MultiModalJourneyRouteDetails]"
    integratedBppConfigId: Maybe (Id IntegratedBPPConfig)
    recentLocationId: Maybe (Id RecentLocation)
    bookingAuthCode: Maybe Text
    osType: Maybe Text
    osBuildVersion: Maybe Text

  default:
    customerCancelled: "false"

  beamFields:
    price:
      currency: Maybe Currency
      price: HighPrecMoney
    estimatedPrice:
      estimatedPrice: HighPrecMoney
    finalPrice:
      finalPrice: Maybe HighPrecMoney
    journeyRouteDetails: {}

  types:
    FRFSTicketBookingStatus:
      enum: "NEW, APPROVED, PAYMENT_PENDING, CONFIRMING, FAILED, CONFIRMED, CANCELLED, COUNTER_CANCELLED, CANCEL_INITIATED, TECHNICAL_CANCEL_REJECTED"
    CashbackStatus:
      enum: "PENDING, PROCESSING, SUCCESSFUL, CASHBACK_FAILED, MANUAL_VERIFICATION"

  intermediateTransformers:
    fromTType:
      - journeyRouteDetailsList: Storage.Queries.JourneyRouteDetails.findAllBySearchId (Kernel.Types.Id.Id searchId)|EM

  fromTType:
    price: Kernel.Types.Common.mkPrice currency price|E
    estimatedPrice: Kernel.Types.Common.mkPrice currency estimatedPrice|E
    finalPrice: Kernel.Prelude.fmap (Kernel.Types.Common.mkPrice currency) finalPrice|E
    journeyRouteDetails: Storage.Queries.Transformers.RouteDetails.getTransformedJourneyRouteDetails journeyRouteDetailsList|E

  toTType:
    price: (.amount)|I
    estimatedPrice: (.amount)|I
    finalPrice: Kernel.Prelude.fmap (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I

  constraints:
    id: PrimaryKey
    searchId: SecondaryKey
    bppOrderId: SecondaryKey
    riderId: "!SecondaryKey"
    quoteId: SecondaryKey
    journeyId: "!SecondaryKey"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findByQuoteId:
      kvFunction: findOneWithKV
      where: quoteId
    findByBppOrderId:
      kvFunction: findOneWithKV
      where: bppOrderId
    findBySearchId:
      kvFunction: findOneWithKV
      where: searchId
    findAllByStatus:
      kvFunction: findAllWithKV
      where: status
    updateStatusById:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where: id
    updateValidTillById:
      kvFunction: updateWithKV
      params: [validTill, updatedAt]
      where: id
    updateStatusValidTillAndPaymentTxnById:
      kvFunction: updateWithKV
      params: [status, validTill, paymentTxnId, updatedAt]
      where: id
    updateBPPOrderIdAndStatusById:
      kvFunction: updateWithKV
      params: [bppOrderId, status, updatedAt]
      where: id
    updateFinalPriceById:
      kvFunction: updateWithKV
      params: [finalPrice, updatedAt]
      where: id
    updatePriceById:
      kvFunction: updateWithKV
      params: [price, updatedAt]
      where: id
    updateBppBankDetailsById:
      kvFunction: updateWithKV
      params: [bppBankAccountNumber, bppBankCode, updatedAt]
      where: id
    updateRefundCancellationChargesAndIsCancellableByBookingId:
      kvFunction: updateOneWithKV
      params:
        [refundAmount, cancellationCharges, isBookingCancellable, updatedAt]
      where: id
    updateIsBookingCancellableByBookingId:
      kvFunction: updateOneWithKV
      params: [isBookingCancellable, updatedAt]
      where: id
    updateCustomerCancelledByBookingId:
      kvFunction: updateOneWithKV
      params: [customerCancelled, updatedAt]
      where: id
    updatePayoutStatusById:
      kvFunction: updateOneWithKV
      params: [cashbackStatus]
      where: id
    updatePayoutOrderId:
      kvFunction: updateOneWithKV
      params: [cashbackPayoutOrderId]
      where: id
    findAllByJourneyId:
      kvFunction: findAllWithKV
      where: journeyId
    findAllByJourneyIdCond:
      kvFunction: findAllWithKVAndConditionalDB
      where: journeyId
    updateOnInitDone:
      kvFunction: updateOneWithKV
      params: [journeyOnInitDone]
      where: id
    updateInterestDelayedByQuoteId:
      kvFunction: updateOneWithKV
      params: [bppDelayedInterest]
      where: quoteId
    updateJourneyLegStatus:
      kvFunction: updateOneWithKV
      params: [journeyLegStatus]
      where: id
    updateGoogleWalletLinkById:
      kvFunction: updateOneWithKV
      params: [googleWalletJWTUrl]
      where: id
    updateQuantity:
      kvFunction: updateWithKV
      params: [quantity, updatedAt]
      where: id

  extraOperations:
    - EXTRA_QUERY_FILE
# Make use of FareBreakup to store the fare breakup of a ticket

# Get transaction_id from Payment Transaction table

FRFSTicket:
  tableName: frfs_ticket

  fields:
    id: Id FRFSTicket
    description: Maybe Text
    frfsTicketBookingId: Id FRFSTicketBooking
    riderId: Id Person
    status: FRFSTicketStatus
    qrData: Text
    validTill: UTCTime
    ticketNumber: Text
    qrRefreshAt: Maybe UTCTime
    scannedByVehicleNumber: Maybe Text
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    partnerOrgTransactionId: Maybe (Id PartnerOrgTransaction)
    partnerOrgId: Maybe (Id PartnerOrganization)
    isTicketFree: Maybe Bool

  types:
    FRFSTicketStatus:
      enum: "ACTIVE, EXPIRED, USED, CANCELLED, COUNTER_CANCELLED, CANCEL_INITIATED, TECHNICAL_CANCEL_REJECTED"

  constraints:
    id: PrimaryKey
    frfsTicketBookingId: SecondaryKey

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllByStatus:
      kvFunction: findOneWithKV
      where: status
    findAllByTicketBookingId:
      kvFunction: findAllWithKV
      where: frfsTicketBookingId
    findByTicketBookingIdTicketNumber:
      kvFunction: findOneWithKV
      where:
        and: [frfsTicketBookingId, ticketNumber]
    findOneByTicketNumber:
      kvFunction: findOneWithKV
      where: ticketNumber
    updateStatusByTBookingIdAndTicketNumber:
      kvFunction: updateWithKV
      params: [status, scannedByVehicleNumber, updatedAt]
      where:
        and: [frfsTicketBookingId, ticketNumber]
    updateAllStatusByBookingId:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where:
        and: [frfsTicketBookingId]
    updateRefreshTicketQRByTBookingIdAndTicketNumber:
      kvFunction: updateWithKV
      params: [qrData, qrRefreshAt]
      where:
        and: [frfsTicketBookingId, ticketNumber]

FRFSTicketBookingPayment:
  tableName: frfs_ticket_booking_payment

  fields:
    id: Id FRFSTicketBookingPayment
    frfsTicketBookingId: Id FRFSTicketBooking
    paymentOrderId: Id PaymentOrder
    status: FRFSTicketBookingPaymentStatus

  types:
    FRFSTicketBookingPaymentStatus:
      enum: "PENDING, SUCCESS, FAILED, REFUND_PENDING, REFUNDED"

  constraints:
    id: PrimaryKey
    frfsTicketBookingId: SecondaryKey
    paymentOrderId: SecondaryKey

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllTicketBookingId:
      kvFunction: findAllWithKV
      where: frfsTicketBookingId
    findByPaymentOrderId:
      kvFunction: findOneWithKV
      where: paymentOrderId
    findAllByStatus:
      kvFunction: findAllWithKV
      where: status
    updateStatusByTicketBookingId:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where: frfsTicketBookingId

FRFSRecon:
  tableName: frfs_recon
  derives: "Generic,Show"
  fields:
    id: Id FRFSRecon
    frfsTicketBookingId: Id FRFSTicketBooking
    networkOrderId: Text # bpp_order_id
    collectorSubscriberId: Text # bap_subscriber_id
    receiverSubscriberId: Text # bpp_subscriber_id
    date: Text # on_confirm date
    time: Text # on_confirm time
    mobileNumber: Maybe Text # customer number
    sourceStationCode: Text # source station code
    destinationStationCode: Text # destination station code
    ticketQty: Int # ticket quantity
    ticketNumber: Text
    transactionRefNumber: Text # transactionId
    transactionUUID: Maybe Text # transaction uuid
    txnId: Maybe Text # transaction uuid
    fare: Price # per ticket price
    buyerFinderFee: Price # populated from bapConfig
    totalOrderValue: Price # amount paid by customer
    settlementAmount: Price # settlement amount = totalOrderValue - bff
    beneficiaryIFSC: Maybe Text # beneficiary ifsc code, from on_confirm
    beneficiaryBankAccount: Maybe Text # beneficiary bank account, from on_confirm
    collectorIFSC: Maybe Text # collector ifsc code, from bapConfig
    settlementReferenceNumber: Maybe Text # utr number, to be populated post settlement
    settlementDate: Maybe UTCTime # to be populated post settlement
    differenceAmount: Maybe Price # Nothing
    message: Maybe Text # Nothing
    ticketStatus: Maybe FRFSTicketStatus
    providerId: Text
    providerName: Text

  queries:
    updateTOrderValueAndSettlementAmountById:
      kvFunction: updateWithKV
      params: [settlementAmount, totalOrderValue, updatedAt]
      where: frfsTicketBookingId
    updateStatusByTicketBookingId:
      kvFunction: updateWithKV
      params: [ticketStatus, updatedAt]
      where: frfsTicketBookingId

  beamFields:
    fare:
      currency: Maybe Currency
      fare: HighPrecMoney
    buyerFinderFee:
      buyerFinderFee: HighPrecMoney
    totalOrderValue:
      totalOrderValue: HighPrecMoney
    settlementAmount:
      settlementAmount: HighPrecMoney
    differenceAmount:
      differenceAmount: Maybe HighPrecMoney

  fromTType:
    fare: Kernel.Types.Common.mkPrice currency fare|E
    buyerFinderFee: Kernel.Types.Common.mkPrice currency buyerFinderFee|E
    totalOrderValue: Kernel.Types.Common.mkPrice currency totalOrderValue|E
    settlementAmount: Kernel.Types.Common.mkPrice currency settlementAmount|E
    differenceAmount: Kernel.Prelude.fmap (Kernel.Types.Common.mkPrice currency) differenceAmount|E

  toTType:
    fare: (.amount)|I
    buyerFinderFee: (.amount)|I
    totalOrderValue: (.amount)|I
    settlementAmount: (.amount)|I
    differenceAmount: Kernel.Prelude.fmap (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I

FRFSConfig:
  tableName: frfs_config
  derives: "Generic,Show,FromJSON,ToJSON,Eq"
  fields:
    merchantOperatingCityId: Id MerchantOperatingCity
    merchantId: Id Merchant
    bookingStartTime: UTCTime
    bookingEndTime: UTCTime
    roundTripTicketLimit: Int
    oneWayTicketLimit: Int
    metroStationTtl: Int
    busStationTtl: Seconds
    discount: Int
    isEventOngoing: Maybe Bool
    isCancellationAllowed: Bool
    freeTicketInterval: Maybe Int
    maxFreeTicketCashback: Maybe Int
    customDates: "[Text]"
    customEndTime: Text
    cancellationReasonId: Maybe Text
    straightLineDistance: Meters
    radius: Meters
    providerId: Maybe Text
    providerName: Maybe Text
    validTillSeconds: Seconds

  beamType:
    isCancellationAllowed: Maybe Bool
    busStationTtl: Maybe Seconds
    straightLineDistance: Maybe Meters
    radius: Maybe Meters
    validTillSeconds: Maybe Seconds

  queries:
    findByMerchantOperatingCityId:
      kvFunction: findOneWithKV
      where: merchantOperatingCityId

  constraints:
    merchantOperatingCityId: PrimaryKey

  default:
    isEventOngoing: "false"
    isCancellationAllowed: "true"
    freeTicketInterval: "9999"
    maxFreeTicketCashback: "0"
    busStationTtl: "1800"
    straightLineDistance: "5000"
    radius: "3000"
    validTillSeconds: "300"

  fromTType:
    isCancellationAllowed: Kernel.Prelude.fromMaybe True|I
    busStationTtl: Kernel.Prelude.fromMaybe (Kernel.Types.Time.Seconds 1800)|I
    straightLineDistance: Kernel.Prelude.fromMaybe  (Kernel.Types.Distance.Meters 5000)|I
    radius: Kernel.Prelude.fromMaybe (Kernel.Types.Distance.Meters 3000)|I
    validTillSeconds: Kernel.Prelude.fromMaybe (Kernel.Types.Time.Seconds 300)|I

  toTType:
    isCancellationAllowed: Kernel.Prelude.Just|I
    busStationTtl: Kernel.Prelude.Just|I
    straightLineDistance: Kernel.Prelude.Just|I
    radius: Kernel.Prelude.Just|I
    validTillSeconds: Kernel.Prelude.Just|I

Route:
  tableName: route
  derives: "Generic,Show,FromJSON,ToJSON"
  fields:
    id: Id Route
    code: Text
    shortName: Text
    longName: Text
    startPoint: LatLong
    endPoint: LatLong
    vehicleType: VehicleCategory
    color: Maybe Text
    polyline: Maybe Text
    timeBounds: TimeBound
    dailyTripCount: Maybe Int
    stopCount: Maybe Int
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    integratedBppConfigId: Id IntegratedBPPConfig
  default:
    timeBounds: "'Unbounded'"
  sqlType:
    lat: double precision
    lon: double precision
  beamFields:
    startPoint:
      startLat: Double
      startLon: Double
    endPoint:
      endLat: Double
      endLon: Double
  toTType:
    startLat: (.lat) startPoint|E
    startLon: (.lon) startPoint|E
    endLat: (.lat) endPoint|E
    endLon: (.lon) endPoint|E
  fromTType:
    startPoint: Kernel.External.Maps.Types.LatLong startLat startLon|E
    endPoint: Kernel.External.Maps.Types.LatLong endLat endLon|E

  constraints:
    id: PrimaryKey
    code: SecondaryKey

  queries:
    findByRouteCode:
      kvFunction: findOneWithKV
      where:
        and: [code, integratedBppConfigId]
    findByRouteId:
      kvFunction: findOneWithKV
      where: id
    findAllByVehicleType:
      kvFunction: findAllWithOptionsKV
      where:
        and: [vehicleType, integratedBppConfigId]
    findAllByBppConfigId:
      kvFunction: findAllWithKV
      where:
        and: [integratedBppConfigId]
    findByRouteCodes:
      kvFunction: findAllWithKV
      where:
        and:
          - in: [code, integratedBppConfigId]
    deleteByRouteCode:
      kvFunction: deleteWithKV
      where:
        and: [code, integratedBppConfigId]
  extraOperations:
    - EXTRA_QUERY_FILE

RouteStopMapping:
  tableName: route_stop_mapping
  derives: "Generic,Show,Eq,FromJSON,ToJSON,ToSchema,Ord"
  fields:
    routeCode: Text
    stopCode: Text
    providerCode: Text
    stopName: Text
    stopPoint: LatLong
    sequenceNum: Int
    estimatedTravelTimeFromPreviousStop: Maybe Seconds
    vehicleType: VehicleCategory
    timeBounds: TimeBound
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    integratedBppConfigId: Id IntegratedBPPConfig
  beamFields:
    stopPoint:
      stopLat: Double
      stopLon: Double
  toTType:
    stopLat: (.lat)|I
    stopLon: (.lon)|I
  fromTType:
    stopPoint: Kernel.External.Maps.Types.LatLong stopLat stopLon|E
  default:
    timeBounds: "'Unbounded'"
  constraints:
    routeCode: PrimaryKey
    stopCode: PrimaryKey
    sequenceNum: PrimaryKey
    integratedBppConfigId: PrimaryKey
  queries:
    findByRouteCode:
      kvFunction: findAllWithKV
      where:
        and: [routeCode, integratedBppConfigId]
    findByRouteCodeAndStopCode:
      kvFunction: findAllWithKV
      where:
        and: [routeCode, stopCode, integratedBppConfigId]
    findByStopCode:
      kvFunction: findAllWithKV
      where:
        and: [stopCode, integratedBppConfigId]
    findAllByBppConfigId:
      kvFunction: findAllWithKV
      where:
        and: [integratedBppConfigId]
    findByStopCodes:
      kvFunction: findAllWithKV
      where:
        and:
          - in: [stopCode, integratedBppConfigId]
    findByRouteCodes:
      kvFunction: findAllWithKV
      where:
        and:
          - in: [routeCode, integratedBppConfigId]

FRFSRouteFareProduct:
  tableName: frfs_route_fare_product
  fields:
    id: Id FRFSRouteFareProduct
    routeCode: Text
    vehicleType: VehicleCategory
    farePolicyId: Id FRFSFarePolicy
    vehicleServiceTierId: Id FRFSVehicleServiceTier
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    timeBounds: TimeBound
    integratedBppConfigId: Id IntegratedBPPConfig
  default:
    timeBounds: "'Unbounded'"
  queries:
    findByRouteCode:
      kvFunction: findAllWithKV
      where:
        and: [routeCode, integratedBppConfigId]
    findAllByIntegratedBPPConfigId:
      kvFunction: findAllWithKV
      where:
        and: [integratedBppConfigId]

FRFSFarePolicy:
  tableName: frfs_fare_policy
  fields:
    id: Id FRFSFarePolicy
    applicableDiscountIds: "[Id FRFSTicketDiscount]"
    _type: FRFSFarePolicyType
    description: Text
    cessCharge: Maybe HighPrecMoney
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
  types:
    FRFSFarePolicyType:
      enum: "MatrixBased, StageBased"
  default:
    applicableDiscountIds: "'{}'"
  constraints:
    id: PrimaryKey
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllByIds:
      kvFunction: findAllWithKV
      where:
         in: [id]

StopFare:
  tableName: route_stop_fare
  fields:
    farePolicyId: Id FRFSFarePolicy
    startStopCode: Text
    endStopCode: Text
    amount: HighPrecMoney
    currency: Currency
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    integratedBppConfigId: Id IntegratedBPPConfig
  beamType:
    routeCode: Maybe Text
  default:
    timeBounds: "'Unbounded'"
    currency: "'INR'"
  constraints:
    farePolicyId: PrimaryKey
    startStopCode: PrimaryKey
    endStopCode: PrimaryKey
  queries:
    findByRouteCode:
      kvFunction: findAllWithKV
      where:
        and: [farePolicyId]
    findByRouteStartAndStopCode:
      kvFunction: findOneWithKV
      where:
        and: [farePolicyId, startStopCode, endStopCode]
    findAllByStartStopAndIntegratedBPPConfigId:
      kvFunction: findAllWithKV
      where:
        and: [startStopCode, endStopCode, integratedBppConfigId]
    updateFareByStopCodes:
      kvFunction: updateOneWithKV
      params: [amount]
      where:
        and: [farePolicyId, startStopCode, endStopCode]


FRFSStageFare:
  tableName: frfs_stage_fare
  fields:
    farePolicyId: Id FRFSFarePolicy
    stage: Int
    amount: HighPrecMoney
    currency: Currency
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
  default:
    currency: "'INR'"
  constraints:
    farePolicyId: PrimaryKey
    stage: PrimaryKey
  queries:
    findAllByFarePolicyId:
      kvFunction: findAllWithKV
      where: farePolicyId

FRFSGtfsStageFare:
  tableName: frfs_gtfs_stage_fare
  fields:
    id: Id FRFSGtfsStageFare
    stage: Int
    amount: HighPrecMoney
    currency: Currency
    vehicleServiceTierId: Id FRFSVehicleServiceTier
    vehicleType: VehicleCategory
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    cessCharge: Maybe HighPrecMoney
    discountIds: "[Id FRFSTicketDiscount]"
  constraints:
    id: PrimaryKey
  default:
    applicableDiscountIds: "'{}'"
  queries:
    findAllByVehicleServiceTierId:
      kvFunction: findAllWithKV
      where: vehicleServiceTierId
    findAllByVehicleTypeAndStageAndMerchantOperatingCityId:
      kvFunction: findAllWithKV
      where:
        and: [vehicleType, stage, merchantOperatingCityId]

GTFSFeedInfo:
  tableName: gtfs_feed_info
  fields:
    feedId: Id GTFSFeedInfo
    vehicleType: VehicleCategory
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
  constraints:
    feedId: PrimaryKey
  queries:
    findByVehicleTypeAndCity:
      kvFunction: findOneWithKV
      where:
        and: [vehicleType, merchantId, merchantOperatingCityId]

FRFSRouteStopStageFare:
  tableName: frfs_route_stop_stage_fare
  fields:
    farePolicyId: Id FRFSFarePolicy
    routeCode: Text
    stopCode: Text
    stage: Int
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
  constraints:
    farePolicyId: PrimaryKey
    routeCode: PrimaryKey
    stopCode: PrimaryKey
  queries:
    findByRouteAndStopCode:
      kvFunction: findOneWithKV
      where:
        and: [farePolicyId, routeCode, stopCode]

FRFSTicketDiscount:
  tableName: frfs_ticket_discount
  derives: "Generic,Show,Eq,FromJSON,ToJSON,ToSchema"
  fields:
    id: Id FRFSTicketDiscount
    code: Text
    title: Text
    description: Text
    tnc: Text
    value: DiscountValue
    currency: Currency
    vehicleType: VehicleCategory
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
  types:
    DiscountValue:
      enum: "FixedAmount HighPrecMoney, Percentage Double"
  constraints:
    id: PrimaryKey
  queries:
    findByCodeAndVehicleAndCity:
      kvFunction: findOneWithKV
      where:
        and: [code, vehicleType, merchantId, merchantOperatingCityId]
    findByIdAndVehicleAndCity:
      kvFunction: findOneWithKV
      where:
        and: [id, vehicleType, merchantId, merchantOperatingCityId]

FRFSVehicleServiceTier:
  tableName: frfs_vehicle_service_tier
  fields:
    id: Id FRFSVehicleServiceTier
    providerCode: Text
    _type: ServiceTierType
    shortName: Text
    longName: Text
    description: Text
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
  constraints:
    id: PrimaryKey
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findByProviderCode:
      kvFunction: findAllWithKV
      where:
        and: [providerCode, merchantOperatingCityId]
    findByServiceTierAndMerchantOperatingCityId:
      kvFunction: findOneWithKV
      where:
        and: [_type,merchantOperatingCityId]

RouteTripMapping:
  tableName: route_trip_mapping
  fields:
    routeCode: Text
    tripCode: Text
    tripStartTime: Text
    tripEndTime: Text
    vehicleType: VehicleCategory
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    createdAt: UTCTime
    updatedAt: UTCTime
    integratedBppConfigId: Id IntegratedBPPConfig
  constraints:
    tripCode: PrimaryKey
  queries:
    findAllTripIdByRouteCode:
      kvFunction: findAllWithKV
      where:
        and: [routeCode, integratedBppConfigId]

RouteStopTimeTable:
  tableName: route_stop_time_table
  fields:
    tripId: Id RouteStopTimeTable
    routeCode: Text
    stopCode: Text
    timeOfDeparture: TimeOfDay
    timeOfArrival: TimeOfDay
    serviceTierType: ServiceTierType
    integratedBppConfigId: Id IntegratedBPPConfig
    delay: Maybe Seconds
    source: SourceType
    stage: Maybe Int
  beamType:
    source: Maybe SourceType
  types:
    SourceType:
      enum: "LIVE, GTFS"
  fromTType:
    source: Kernel.Prelude.fromMaybe Domain.Types.RouteStopTimeTable.GTFS|I
  toTType:
    source: Kernel.Prelude.Just|I

  constraints:
    tripId: PrimaryKey
    integratedBppConfigId : PrimaryKey
    stopCode: PrimaryKey
    timeOfArrival: PrimaryKey
    serviceTierType: PrimaryKey
  queries:
    findByRouteCodeAndStopCode:
      kvFunction: findAllWithKV
      where:
        and:
          - in: [ routeCode]
          - eq: [stopCode, integratedBppConfigId]

    findByRouteCode:
      kvFunction: findAllWithKV
      where:
        and:
          - in: [routeCode]
          - eq: [integratedBppConfigId]

RouteStopCalender:
  tableName: route_stop_calender
  fields:
    tripId: Id RouteStopTimeTable
    serviceability: "[Int]"
    integratedBppConfigId: Id IntegratedBPPConfig
  constraints:
    tripId: PrimaryKey
    integratedBppConfigId: PrimaryKey
  sqlType:
    serviceability: integer[]
  queries:
    findByTripIds:
      kvFunction: findAllWithKV
      where:
        and:
          - in: [tripId]
          - integratedBppConfigId

FRFSTicketBookingFeedback:
  tableName: frfs_ticket_booking_feedback
  fields:
    id: Id FRFSTicketBookingFeedback
    bookingId: Id FRFSTicketBooking
    createdAt: UTCTime
    updatedAt: UTCTime
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    isFareAccepted: Bool
  constraints:
    id: PrimaryKey
  queries:
    findByBookingId:
      kvFunction: findOneWithKV
      where:
        and: [bookingId]
    findByMerchantIdAndOperatingCityId:
      kvFunction: findAllWithKV
      where:
        and: [merchantId, merchantOperatingCityId]
    updateByBookingId:
      kvFunction: updateOneWithKV
      params: [isFareAccepted, updatedAt]
      where:
        and: [bookingId]
