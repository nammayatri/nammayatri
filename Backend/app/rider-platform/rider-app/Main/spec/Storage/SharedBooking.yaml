imports:
  Merchant: Domain.Types.Merchant
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  SharedEstimate: Domain.Types.SharedEstimate
  Booking: Domain.Types.Booking
  Person: Domain.Types.Person
  Price: Kernel.Types.Common
  Seconds: Kernel.Types.Common
  Distance: Kernel.Types.Common
  ServiceTierType: Domain.Types.ServiceTierType
  BaseUrl: Kernel.Types.Common
  Currency: Kernel.Types.Common
  HighPrecMoney: Kernel.Types.Common
  HighPrecMeters: Kernel.Types.Common
  HighPrecDistance: Kernel.Types.Common
  DistanceUnit: Kernel.Types.Common
  parseBaseUrl: Kernel.Prelude
  showBaseUrl: Kernel.Prelude

SharedBooking:
  tableName: shared_booking
  derives: "Generic,Show"

  fields:
    id: Id SharedBooking
    sharedEstimateId: Id SharedEstimate
    bookingIds: "[Id Booking]"
    transactionId: Text
    bppSharedBookingId: Text
    status: BookingStatus
    merchantId: Id Merchant
    merchantOperatingCityId: Id MerchantOperatingCity
    driverId: Maybe (Id Person)
    providerId: Text
    providerUrl: BaseUrl
    vehicleServiceTierType: ServiceTierType|NoRelation
    estimatedTotalFare: Price
    estimatedDuration: Maybe Seconds
    estimatedDistance: Maybe Distance
    pairingTime: UTCTime
    distanceUnit: DistanceUnit
    createdAt: UTCTime
    updatedAt: UTCTime

  constraints:
    id: PrimaryKey
    sharedEstimateId: SecondaryKey

  beamType:
    providerUrl: Text
    estimatedTotalFare: HighPrecMoney
    currency: Maybe Currency
    distanceUnit: Maybe DistanceUnit

  beamFields:
    estimatedDistance:
      estimatedDistance: Maybe HighPrecMeters
      estimatedDistanceValue: Maybe HighPrecDistance
    estimatedTotalFare:
      currency: Maybe Currency
      estimatedTotalFare: HighPrecMoney

  toTType:
    providerUrl: showBaseUrl|I
    estimatedTotalFare: ((.amount) estimatedTotalFare)|E
    estimatedDistance: (Kernel.Types.Common.distanceToHighPrecMeters <$> estimatedDistance)|E
    estimatedDistanceValue: (Kernel.Utils.Common.distanceToHighPrecDistance distanceUnit <$> estimatedDistance)|E
    distanceUnit: Kernel.Prelude.Just|I
    currency: (Just $ (.currency) estimatedTotalFare)|E

  fromTType:
    providerUrl: parseBaseUrl|MI
    distanceUnit: Kernel.Prelude.fromMaybe Kernel.Types.Common.Meter |I
    estimatedTotalFare: Kernel.Types.Common.mkPrice currency estimatedTotalFare|E
    currency: fromMaybe Kernel.Types.Common.INR currency|E
    estimatedDistance: Kernel.Utils.Common.mkDistanceWithDefault distanceUnit estimatedDistanceValue <$> estimatedDistance|E

  sqlType:
    sharedEstimateId: uuid
    bookingIds: "uuid[]"
    transactionId: character varying(36)
    bppSharedBookingId: text
    status: character varying(255)
    merchantId: character varying(36)
    merchantOperatingCityId: character varying(36)
    driverId: character varying(36)
    providerId: character varying(255)
    providerUrl: character varying(255)
    vehicleServiceTierType: character varying(255)
    estimatedTotalFare: numeric(30,10)
    estimatedDuration: integer
    estimatedDistance: double precision
    pairingTime: timestamptz
    createdAt: timestamptz
    updatedAt: timestamptz
    currency: character varying(255)
    distanceUnit: character varying(255)
    estimatedDistanceValue: double precision

  queries:
    findBySharedEstimateId:
      kvFunction: findOneWithKV
      where: sharedEstimateId

    updateStatus:
      kvFunction: updateOneWithKV
      params: [status, updatedAt]
      where: id

    updateDriverId:
      kvFunction: updateOneWithKV
      params: [driverId, updatedAt]
      where: id

    findByStatus:
      kvFunction: findAllWithKV
      where: status

  types:
    BookingStatus:
      enum: "NEW, CONFIRMED, AWAITING_REASSIGNMENT, REALLOCATED, COMPLETED, CANCELLED, TRIP_ASSIGNED"
      derive: "HttpInstance"