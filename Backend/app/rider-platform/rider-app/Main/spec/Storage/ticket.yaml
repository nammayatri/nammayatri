imports:
  MerchantOperatingCity: Domain.Types.MerchantOperatingCity
  Merchant: Domain.Types.Merchant
  HighPrecMoney: Kernel.Types.Common
  Price: Kernel.Types.Common
  Currency: Kernel.Types.Common
  UTCTime: Kernel.Prelude
  Person: Domain.Types.Person
  ShortId: Kernel.Types.Id
  TicketBookingService: Domain.Types.TicketBookingService
  TicketBookingServiceCategory: Domain.Types.TicketBookingServiceCategory
  TicketBookingPeopleCategory: Domain.Types.TicketBookingPeopleCategory
  TicketBooking: Domain.Types.TicketBooking
  TicketPlace: Domain.Types.TicketPlace
  TicketService: Domain.Types.TicketService
  BusinessHour: Domain.Types.BusinessHour
  SpecialOccasion: Domain.Types.SpecialOccasion
  ServiceCategory: Domain.Types.ServiceCategory
  ServicePeopleCategory: Domain.Types.ServicePeopleCategory
  BusinessHourType: Domain.Types.BusinessHour
  Value: Data.Aeson
  TimeBound : Kernel.Types.TimeBound
  BookingStatus: Domain.Types.Extra.TicketBooking
  Day: Data.Time
  VendorSplitDetails: Tools.Payment
  SplitType: Tools.Payment
  TicketPlaceDef: Domain.Types.EventManagement
  Rule: SharedLogic.TicketRule.Core
  ActionType: SharedLogic.TicketRule.Core

TicketPlace:
  tableName: ticket_place

  fields:
    id: Id TicketPlace
    merchantOperatingCityId: Id MerchantOperatingCity
    name: Text
    description: Maybe Text
    lat: Maybe Double
    lon: Maybe Double
    gallery: "[Text]"
    shortDesc: Text
    iconUrl: Maybe Text
    termsAndConditions: "[Text]"
    termsAndConditionsUrl: Maybe Text
    placeType: PlaceType #
    mapImageUrl: Maybe Text
    openTimings: Maybe TimeOfDay
    closeTimings: Maybe TimeOfDay
    status: PlaceStatus
    allowSameDayBooking: Bool
    ticketMerchantId: Maybe Text
    priority: Int
    customTabs: "Maybe [CustomTab]"
    rules: "Maybe [Rule]"
    recommend: Bool

  types:
    PlaceType:
      enum: "Museum,ThemePark,AmusementPark,WaterPark,WildLifeSanctuary,ArtGallery,HeritageSite,ReligiousSite,Other"
    PlaceStatus:
      enum: "Active,Inactive,ComingSoon,Ended,Unpublished"
    CustomTab:
      header: Text
      body: Text
      derive: "Eq,Ord"

  beamType:
    priority: Maybe Int
    customTabs: "Maybe Value"
    rules: "Maybe Value"
    recommend: Maybe Bool

  sqlType:
    customTabs: json
    rules: json

  fromTType:
    priority: Kernel.Prelude.fromMaybe 0|I
    customTabs: (\val -> case Data.Aeson.fromJSON val of Data.Aeson.Success x -> Just x; Data.Aeson.Error _ -> Nothing) =<< customTabs|E
    rules: (\val -> case Data.Aeson.fromJSON val of Data.Aeson.Success x -> Just x; Data.Aeson.Error _ -> Nothing) =<< rules|E
    recommend: fromMaybe False recommend|E
  toTType:
    priority: Kernel.Prelude.Just|I
    customTabs: Data.Aeson.toJSON <$> customTabs|E
    rules: Data.Aeson.toJSON <$> rules|E
    recommend: Kernel.Prelude.Just|I
  default:
    termsAndConditions: "'{}'"
    placeType: "'Other'"
    shortDesc: "'Short description not available'"
    status: "'Active'"
    allowSameDayBooking: "true"
    priority: "0"

  queries:
    getTicketPlaces:
      kvFunction: findAllWithKV
      where: merchantOperatingCityId
    findById:
      kvFunction: findOneWithKV
      where: id
    findByNameAndCity:
      kvFunction: findOneWithKV
      where:
        and: [name, merchantOperatingCityId]
    findAllByTicketMerchantIdAndStatus:
      kvFunction: findAllWithKV
      where:
        and: [ticketMerchantId, status]
    getAllTicketPlaces:
      kvFunction: findAllWithKV
      where: status
    updateGalleryById:
      kvFunction: updateOneWithKV
      params: [gallery]
      where: id
    findAllRecommendationTicketPlaces:
      kvFunction: findAllWithKV
      where: recommend
    updateRecommendById:
      kvFunction: updateOneWithKV
      params: [recommend]
      where: id

TicketService:
  tableName: ticket_service

  fields:
    id: Id TicketService
    placesId: Text
    service: Text
    shortDesc: Maybe Text
    operationalDays: "[Text]"
    operationalDate: "Maybe OperationalDate"
    maxVerification: Int
    allowFutureBooking: Bool
    allowCancellation: Bool
    expiry: ExpiryType
    businessHours: "[Id BusinessHour]"
    rules: "Maybe [Rule]"
    isClosed: Bool
  types:
    ExpiryType:
      enum: "InstantExpiry Kernel.Prelude.Int,VisitDate Kernel.Prelude.TimeOfDay"
    OperationalDate:
      startDate: Day
      eneDate: Day
      derive: "Eq,Ord"

  beamType:
    rules: "Maybe Value"
    isClosed: Maybe Bool

  beamFields:
    operationalDate:
      operationalStartDate: Maybe Day
      operationalEndDate: Maybe Day

  sqlType:
    operationalDates: text[]
    rules: json
  fromTType:
    operationalDate: ((,) <$> operationalStartDate <*> operationalEndDate) <&> \(operationalStartDate', operationalEndDate') -> Domain.Types.TicketService.OperationalDate operationalEndDate' operationalStartDate'|E
    rules: (\val -> case Data.Aeson.fromJSON val of Data.Aeson.Success x -> Just x; Data.Aeson.Error _ -> Nothing) =<< rules|E
    isClosed: fromMaybe False isClosed|E
  toTType:
    operationalStartDate: operationalDate <&> (.startDate)|E
    operationalEndDate: operationalDate <&> (.eneDate)|E
    rules: Data.Aeson.toJSON <$> rules|E
    isClosed: Kernel.Prelude.Just isClosed|E
  default:
    operationalDays: "'{Monday, Tuesday, Wednesday, Thursday, Friday, Saturday, Sunday}'"
    allowFutureBooking: "true"
    allowCancellation: "false"
    business_hours: "'{}'"
    expiry: "'VisitDate 12:00:00'"
    isClosed: "false"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id

    findByPlacesIdAndService:
      kvFunction: findOneWithKV
      where:
        and: [placesId, service]

    getTicketServicesByPlaceId:
      kvFunction: findAllWithKV
      where: placesId

  extraOperations:
  - EXTRA_QUERY_FILE

SpecialOccasion:
  tableName: special_occasion

  fields:
    id: Id SpecialOccasion
    entityId: Text
    date: Maybe Day
    dayOfWeek: Maybe Text
    specialDayType: SpecialDayType
    description: Maybe Text
    businessHours: "[Id BusinessHour]"
    placeId: Maybe Text
    name: Maybe Text

  types:
    SpecialDayType:
      enum: "Open,Closed"

  constraints:
    id: PrimaryKey
    entityId: SecondaryKey

  queries:
    findSpecialOccasionByEntityIdAndDate:
      kvFunction: findOneWithKV
      where:
        and: [entityId, date]
    findAllSpecialOccasionByEntityId:
      kvFunction: findAllWithKV
      where:
        and: [entityId, date]
    findSpecialOccasionByEntityIdAndDayOfWeek:
      kvFunction: findOneWithKV
      where:
        and: [entityId, dayOfWeek]
    updateBusinessHoursById:
      kvFunction: updateOneWithKV
      params: [businessHours]
      where: id
    findBySplDayAndEntityIdAndDate:
      kvFunction: findOneWithKV
      where:
        and: [specialDayType, entityId, date]
    findAllByPlaceId:
      kvFunction: findAllWithKV
      where: placeId
    findAllByEntityId:
      kvFunction: findAllWithKV
      where: entityId

BusinessHour:
  tableName: business_hour

  fields:
    id: Id BusinessHour
    btype: BusinessHourType # Slot TimeOfDay | Duration TimeOfDay TimeOfDay
    categoryId: "[Id ServiceCategory]"
    bookingClosingTime : Maybe TimeOfDay
    hash: Maybe Text
    expiryDate: Maybe Day
    placeId: Maybe Text
    name: Maybe Text

  types:
    BusinessHourType:
      enum: "Slot Kernel.Prelude.TimeOfDay,Duration Kernel.Prelude.TimeOfDay Kernel.Prelude.TimeOfDay"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllByPlaceId:
      kvFunction: findAllWithKV
      where: placeId
    deleteById:
      kvFunction: deleteWithKV
      where: id
    findAllByHash:
      kvFunction: findAllWithKV
      where: hash

  extraOperations:
    - EXTRA_QUERY_FILE

ServiceCategory:
  tableName: service_category

  fields:
    id: Id ServiceCategory
    name: Text
    description: Text
    availableSeats: Maybe Int
    allowedSeats: Maybe Int
    peopleCategory: "[Id ServicePeopleCategory]"
    placeId: Maybe Text
    rules: "Maybe [Rule]"
    remainingActions: "Maybe [ActionType]"
    isClosed: Bool
  beamFields:
    remainingActions: {}
  sqlType:
    rules: json
  beamType:
    rules: "Maybe Value"
    isClosed: Maybe Bool
  fromTType:
    rules: (\val -> case Data.Aeson.fromJSON val of Data.Aeson.Success x -> Just x; Data.Aeson.Error _ -> Nothing) =<< rules|E
    isClosed: fromMaybe False isClosed|E
    remainingActions: Nothing|E
  toTType:
    rules: Data.Aeson.toJSON <$> rules|E
    isClosed: Kernel.Prelude.Just isClosed|E
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllByPlaceId:
      kvFunction: findAllWithKV
      where: placeId

  extraOperations:
  - EXTRA_QUERY_FILE

ServicePeopleCategory:
  tableName: service_people_category
  derives: "Generic,Show"
  fields:
    id: Id ServicePeopleCategory
    name: Text
    description: Text
    pricePerUnit: Price
    cancellationCharges: "Maybe [CancellationCharge]"
    timeBounds: TimeBound|NoRelation
    pricingType: PricingType
    vendorSplitDetails: "Maybe [VendorSplitDetails]"
    placeId: Maybe Text
    rules: "Maybe [Rule]"
    isClosed: Bool
  beamType:
    cancellationCharges: Maybe Value
    vendorSplitDetails: Maybe Value
    timeBounds: Maybe TimeBound
    pricingType: Maybe PricingType
    rules: Maybe Value
    isClosed: Maybe Bool

  sqlType:
    cancellationCharges: json
    vendorSplitDetails: json
    rules: json
  beamFields:
    pricePerUnit:
      currency: Maybe Currency
      pricePerUnit: HighPrecMoney

  fromTType:
    pricePerUnit: Kernel.Types.Common.mkPrice currency pricePerUnit|E
    cancellationCharges: getCancellationChargesFromTable
    timeBounds: (Kernel.Prelude.fromMaybe Kernel.Types.TimeBound.Unbounded)|I
    pricingType: (Kernel.Prelude.fromMaybe Domain.Types.ServicePeopleCategory.AllDays)|I
    vendorSplitDetails: |-
      (\val -> case Data.Aeson.fromJSON val of Data.Aeson.Success x -> Just x; Data.Aeson.Error _ -> Nothing) =<< vendorSplitDetails|E
    rules: (\val -> case Data.Aeson.fromJSON val of Data.Aeson.Success x -> Just x; Data.Aeson.Error _ -> Nothing) =<< rules|E
    isClosed: fromMaybe False isClosed|E
  toTType:
    pricePerUnit: (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I
    cancellationCharges: convertCancellationChargesToTable
    timeBounds: Kernel.Prelude.Just|I
    pricingType: Kernel.Prelude.Just|I
    vendorSplitDetails: Data.Aeson.toJSON <$> vendorSplitDetails|E
    rules: Data.Aeson.toJSON <$> rules|E
    isClosed: Kernel.Prelude.Just isClosed|E
  default:
    timeBounds: "'Unbounded'"
    pricingType: "'AllDays'"
    isClosed: "false"
  types:
    CancellationCharge:
      time: Seconds
      cancelCharge: CancelCharge
      derive: "'ListInstance, Eq, Ord, Read"
    CancelCharge:
      enum: "FlatFee HighPrecMoney,Percentage Int"
    PricingType:
      enum: "SameDay,AllDays"

  queries:
    findAllServicePeopleCategory:
      kvFunction: findAllWithKV
      where: id
    findAllByPlaceId:
      kvFunction: findAllWithKV
      where: placeId
    findAllById:
      kvFunction: findAllWithKV
      where: id
    findByIdAndTimebounds:
      kvFunction: findOneWithKV
      where:
        and: [id, timeBounds]
    updateByIdAndTimebounds:
      kvFunction: updateOneWithKV
      fullObjectAsParam: True
      params:
        - name
        - description
        - pricePerUnit
        - cancellationCharges
        - pricingType
        - vendorSplitDetails
        - placeId
      where:
        and: [id, timeBounds]
    deleteByIdAndTimebounds:
      kvFunction: deleteWithKV
      where:
        and: [id, timeBounds]

  extraOperations:
  - EXTRA_QUERY_FILE

SeatManagement:
  tableName: seat_management

  fields:
    id: Id SeatManagement
    date: Day
    ticketServiceCategoryId: Id ServiceCategory
    booked: Int
    blocked: Int
    maxCapacity: Maybe Int

  default:
    booked: "0"
    blocked: "0"

  constraints:
    id: PrimaryKey
    ticketServiceCategoryId: SecondaryKey
  queries:
    findByTicketServiceCategoryIdAndDate:
      kvFunction: findOneWithKV
      where:
        and: [ticketServiceCategoryId, date]
    updateBookedSeats:
      kvFunction: updateWithKV
      params: [booked]
      where:
        and: [ticketServiceCategoryId, date]
    safeUpdateBookedSeats:
      kvFunction: updateWithKV
      params: [booked]
      where:
        and:
         - ticketServiceCategoryId
         - date
         - lt:
            - booked
    updateBlockedSeats:
      kvFunction: updateWithKV
      params: [blocked]
      where:
        and: [ticketServiceCategoryId, date]
    updateBookedAndBlockedSeats:
      kvFunction: updateOneWithKV
      params: [booked, blocked]
      where:
        and: [ticketServiceCategoryId, date]
    updateMaxCapacity:
      kvFunction: updateOneWithKV
      params: [maxCapacity]
      where:
        and: [ticketServiceCategoryId, date]


### Ticket Booking ###
TicketBooking:
  tableName: ticket_booking
  derives: "Generic,Show"
  fields:
    id: Id TicketBooking
    shortId: ShortId TicketBooking
    merchantOperatingCityId: Id MerchantOperatingCity
    ticketPlaceId: Id TicketPlace
    personId: Id Person
    amount: Price
    visitDate: Day
    status: BookingStatus
    createdAt: UTCTime
    updatedAt: UTCTime
    bookedSeats: Int
    cancelledSeats: Maybe Int
    vendorSplitDetails: "Maybe [VendorSplitDetails]"
    blockExpirationTime: Maybe Double

  beamType:
    vendorSplitDetails: Maybe Value
  beamFields:
    amount:
      currency: Maybe Currency
      amount: HighPrecMoney

  fromTType:
    amount: Kernel.Types.Common.mkPrice currency amount|E
    vendorSplitDetails: |-
      (\val -> case Data.Aeson.fromJSON val of Data.Aeson.Success x -> Just x; Data.Aeson.Error _ -> Nothing) =<< vendorSplitDetails|E

  toTType:
    amount: (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I
    vendorSplitDetails: Data.Aeson.toJSON <$> vendorSplitDetails|E

  sqlType:
    vendorSplitDetails: json

  constraints:
    id: PrimaryKey
    shortId: SecondaryKey
    personId: SecondaryKey

  default:
    bookedSeats: "0"

  queries:
    updateStatusByShortId:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where: shortId
    findById:
      kvFunction: findOneWithKV
      where: id
    findByShortId:
      kvFunction: findOneWithKV
      where: shortId
    getAllBookingsByPersonId:
      kvFunction: findAllWithOptionsKV
      where:
        and: [personId, merchantOperatingCityId, status]
    getAllBookingsByPlaceIdAndVisitDate:
      kvFunction: findAllWithKV
      where:
        and: [ticketPlaceId, visitDate, status]
    updateStatusAndCancelledSeatsById:
      kvFunction: updateOneWithKV
      params: [status, cancelledSeats, updatedAt]
      where: id

  extraOperations:
  - EXTRA_QUERY_FILE
  - EXTRA_DOMAIN_TYPE_FILE

TicketBookingService:
  tableName: ticket_booking_service
  derives: "Generic,Show"
  fields:
    id: Id TicketBookingService
    shortId: ShortId TicketBookingService
    ticketBookingId: Id TicketBooking
    ticketServiceId: Id TicketService
    merchantOperatingCityId: Id MerchantOperatingCity
    amount: Price
    status: ServiceStatus
    verificationCount: Int
    visitDate: Maybe Day
    btype: BusinessHourType
    bHourId: Maybe (Id BusinessHour)
    expiryDate: Maybe UTCTime
    createdAt: UTCTime
    updatedAt: UTCTime
    bookedSeats: Int
    cancelledSeats: Maybe Int
    vendorSplitDetails: "Maybe [VendorSplitDetails]"

  beamType:
    vendorSplitDetails: Maybe Value
  beamFields:
    amount:
      currency: Maybe Currency
      amount: HighPrecMoney

  fromTType:
    amount: Kernel.Types.Common.mkPrice currency amount|E
    vendorSplitDetails: |-
      (\val -> case Data.Aeson.fromJSON val of Data.Aeson.Success x -> Just x; Data.Aeson.Error _ -> Nothing) =<< vendorSplitDetails|E

  toTType:
    amount: (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I
    vendorSplitDetails: Data.Aeson.toJSON <$> vendorSplitDetails|E

  sqlType:
    vendorSplitDetails: json

  types:
    ServiceStatus:
      enum: "Pending,Failed,Confirmed,Verified,Cancelled"

  default:
    btype: "'Duration 03:30:00 12:00:00'"
    bookedSeats: "0"

  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findByShortId:
      kvFunction: findOneWithKV
      where: shortId
    findAllByBookingId:
      kvFunction: findAllWithKV
      where: ticketBookingId
    updateAllStatusByBookingId:
      kvFunction: updateWithKV
      params: [status, updatedAt]
      where: ticketBookingId
    updateVerificationById:
      kvFunction: updateWithKV
      params: [status, verificationCount, updatedAt]
      where: id
    updateStatusAndCancelledSeatsById:
      kvFunction: updateOneWithKV
      params: [status, cancelledSeats, updatedAt]
      where: id

  extraOperations:
  - EXTRA_QUERY_FILE

TicketBookingServiceCategory:
  tableName: ticket_booking_service_category
  derives: "Generic,Show"
  fields:
    id: Id TicketBookingServiceCategory
    ticketBookingServiceId: Id TicketBookingService
    name: Text
    bookedSeats: Int
    amount: Price
    eventCancelledBy: Maybe CancelledBy
    cancelledSeats: Maybe Int
    amountToRefund: Maybe HighPrecMoney
    serviceCategoryId: Maybe Text
    visitDate: Maybe Day
    btype: Maybe BusinessHourType
    vendorSplitDetails: "Maybe [VendorSplitDetails]"

  beamType:
    vendorSplitDetails: Maybe Value

  beamFields:
    amount:
      currency: Maybe Currency
      amount: HighPrecMoney

  fromTType:
    amount: Kernel.Types.Common.mkPrice currency amount|E
    vendorSplitDetails: |-
      (\val -> case Data.Aeson.fromJSON val of Data.Aeson.Success x -> Just x; Data.Aeson.Error _ -> Nothing) =<< vendorSplitDetails|E

  toTType:
    amount: (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I
    vendorSplitDetails: Data.Aeson.toJSON <$> vendorSplitDetails|E

  sqlType:
    vendorSplitDetails: json

  types:
    CancelledBy:
      enum: "User,Merchant"

  queries:
    findAllByTicketBookingServiceId:
      kvFunction: findAllWithKV
      where: ticketBookingServiceId
    updateCancellationDetailsById:
      kvFunction: updateWithKV
      params: [cancelledSeats, amountToRefund, eventCancelledBy]
      where: id
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllByServiceCategoryIdDateAndBtype:
      kvFunction: findAllWithKV
      where:
        and: [serviceCategoryId, visitDate, btype]

  default:
    bookedSeats: "0"

  extraOperations:
  - EXTRA_QUERY_FILE

TicketBookingPeopleCategory:
  tableName: ticket_booking_people_category
  derives: "Generic,Show"
  fields:
    id: Id TicketBookingPeopleCategory
    ticketBookingServiceCategoryId: Id TicketBookingServiceCategory
    peopleCategoryId: Maybe (Id ServicePeopleCategory)
    name: Text
    pricePerUnit: Price
    numberOfUnits: Int
    numberOfUnitsCancelled: Maybe Int
    amountToRefund: Maybe HighPrecMoney
    vendorSplitDetails: "Maybe [VendorSplitDetails]"

  beamType:
    vendorSplitDetails: Maybe Value
  beamFields:
    pricePerUnit:
      currency: Maybe Currency
      pricePerUnit: HighPrecMoney

  fromTType:
    pricePerUnit: Kernel.Types.Common.mkPrice currency pricePerUnit|E
    vendorSplitDetails: |-
      (\val -> case Data.Aeson.fromJSON val of Data.Aeson.Success x -> Just x; Data.Aeson.Error _ -> Nothing) =<< vendorSplitDetails|E

  toTType:
    pricePerUnit: (.amount)|I
    currency: (Kernel.Prelude.Just . (.currency))|I
    vendorSplitDetails: Data.Aeson.toJSON <$> vendorSplitDetails|E

  sqlType:
    vendorSplitDetails: json
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    findAllByServiceCategoryId:
      kvFunction: findAllWithKV
      where: ticketBookingServiceCategoryId
    updateTicketPeopleUnitsAndAmountById:
      kvFunction: updateWithKV
      params: [numberOfUnitsCancelled, amountToRefund]
      where: id

  extraOperations:
  - EXTRA_QUERY_FILE

DraftTicketChange:
  tableName: draft_ticket_change
  fields:
    id: Id TicketPlace
    draftPayload: Maybe TicketPlaceDef
    isApprovalRequired: Bool
    ticketMerchantId: Maybe Text
    message: Maybe Text
    status: DraftStatus
    createdAt: UTCTime
    updatedAt: UTCTime
  beamType:
    draftPayload: Maybe Value
  types:
    DraftStatus:
      enum: "OPEN,APPROVAL_PENDING,REJECTED,ACCEPTED"
      derive: "HttpInstance"
  toTType:
    draftPayload: Data.Aeson.toJSON <$> draftPayload|E
  fromTType:
    draftPayload: (\val -> case Data.Aeson.fromJSON val of Data.Aeson.Success x -> Just x; Data.Aeson.Error _ -> Nothing) =<< draftPayload|E
  sqlType:
    draftPayload: json
  queries:
    findById:
      kvFunction: findOneWithKV
      where: id
    updateDraftById:
      kvFunction: updateOneWithKV
      params: [draftPayload, isApprovalRequired]
      where: id
    updateStatus:
      kvFunction: updateOneWithKV
      params: [status]
      where: id
    updateMessage:
      kvFunction: updateOneWithKV
      params: [message]
      where: id
    deleteDraftById:
      kvFunction: deleteWithKV
      where: id
    findAllByStatus:
      kvFunction: findAllWithOptionsKV
      where: status
      orderBy:
        field: createdAt
        order: desc

DraftTicketChangeHistory:
  tableName: draft_ticket_change_history
  fields:
    id: Id DraftTicketChangeHistory
    ticketPlaceId: Id TicketPlace
    draftPayload: Maybe TicketPlaceDef
    isApprovalRequired: Bool
    ticketMerchantId: Maybe Text
    createdAt: UTCTime
    updatedAt: UTCTime
    reviewedBy: Maybe Text
    message: Maybe Text
    status: Domain.Types.DraftTicketChange.DraftStatus
  beamType:
    draftPayload: Maybe Value
  toTType:
    draftPayload: Data.Aeson.toJSON <$> draftPayload|E
  fromTType:
    draftPayload: (\val -> case Data.Aeson.fromJSON val of Data.Aeson.Success x -> Just x; Data.Aeson.Error _ -> Nothing) =<< draftPayload|E
  sqlType:
    draftPayload: json
  queries:
    findByTicketPlaceIdAndStatus:
      kvFunction: findAllWithOptionsKV
      where:
        and:
          - ticketPlaceId
          - status
      orderBy:
        field: createdAt
        order: desc
    findByTicketPlaceId:
      kvFunction: findAllWithOptionsKV
      where: ticketPlaceId
      orderBy:
        field: createdAt
        order: desc
