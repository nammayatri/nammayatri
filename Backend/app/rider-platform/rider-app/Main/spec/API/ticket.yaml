imports:
  Text: Data.Text
  Seconds: Kernel.Types.Common
  TicketService: Domain.Types.TicketService
  OperationalDate: Domain.Types.TicketService
  BusinessHour: Domain.Types.BusinessHour
  SpecialOccasion: Domain.Types.SpecialOccasion
  SpecialDayType: Domain.Types.SpecialOccasion
  ServiceCategory: Domain.Types.ServiceCategory
  ServicePeopleCategory: Domain.Types.ServicePeopleCategory
  HighPrecMoney: Kernel.Types.Common
  PriceAPIEntity: Kernel.Types.Common
  ShortId: Kernel.Types.Id
  UTCTime: Kernel.Prelude
  TicketPlace: Domain.Types.TicketPlace
  APISuccess: Kernel.Types.APISuccess
  TicketBooking: Domain.Types.TicketBooking
  BookingStatus: Domain.Types.TicketBooking
  PeopleTicketQuantity: Domain.Types.TicketBooking
  TicketBookingService: Domain.Types.TicketBookingService
  TicketBookingServiceCategory: Domain.Types.TicketBookingServiceCategory
  TicketBookingPeopleCategory: Domain.Types.TicketBookingPeopleCategory
  ServiceStatus: Domain.Types.TicketBookingService
  ExpiryType: Domain.Types.TicketService
  CancellationCharge: Domain.Types.ServicePeopleCategory
  Refunds: Lib.Payment.Domain.Types.Refunds

module: TicketService
types:
  TicketServiceResp:
    id: Id TicketService
    placesId: Id TicketPlace
    name: Text
    maxVerification: Int
    allowFutureBooking: Bool
    expiry: ExpiryType
    businessHours: [BusinessHourResp]
    shortDesc: Maybe Text
    allowCancellation: Bool

  BusinessHourResp:
    id: Id BusinessHour
    slot: Maybe TimeOfDay
    startTime: Maybe TimeOfDay
    endTime: Maybe TimeOfDay
    specialDayDescription: Maybe Text
    specialDayType: Maybe SpecialDayType
    operationalDays: [Text]
    operationalDate: Maybe OperationalDate
    categories: [CategoriesResp]

  CategoriesResp:
    name: Text
    id: Id ServiceCategory
    availableSeats: Maybe Int
    allowedSeats: Maybe Int
    bookedSeats: Int
    isClosed: Bool
    peopleCategories: [PeopleCategoriesResp]

  PeopleCategoriesResp:
    id: Id ServicePeopleCategory
    name: Text
    pricePerUnit: HighPrecMoney
    pricePerUnitWithCurrency: PriceAPIEntity
    description: Text
    cancellationCharges: "Maybe [CancellationCharge]"

  TicketBookingReq:
    visitDate: Day
    services: [TicketBookingServicesReq]

  TicketBookingServicesReq:
    serviceId: Id TicketService
    businessHourId: Id BusinessHour
    categories: [TicketBookingCategoryReq]

  TicketBookingCategoryReq:
    categoryId: Id ServiceCategory
    peopleCategories: [TicketBookingPeopleCategoryReq]

  TicketBookingPeopleCategoryReq:
    peopleCategoryId: Id ServicePeopleCategory
    numberOfUnits: Int

  TicketBookingAPIEntity:
    ticketShortId: Text
    ticketPlaceId: Text
    ticketPlaceName: Text
    personId: Text
    amount: HighPrecMoney
    amountWithCurrency: PriceAPIEntity
    visitDate: Day
    status: BookingStatus

  TicketBookingAPIEntityV2:
    ticketShortId: Text
    ticketPlaceId: Text
    ticketPlaceName: Text
    personId: Text
    amount: HighPrecMoney
    amountWithCurrency: PriceAPIEntity
    visitDate: Day
    status: BookingStatus
    peopleTicketQuantity: "Maybe [PeopleTicketQuantity]"

  TicketBookingDetails:
    ticketShortId: Text
    ticketPlaceId: Text
    ticketPlaceName: Text
    personId: Text
    amount: HighPrecMoney
    amountWithCurrency: PriceAPIEntity
    visitDate: Day
    status: BookingStatus
    lat: Double
    lon: Double
    services: [TicketBookingServiceDetails]
    refundDetails: [Refunds]

  TicketBookingServiceDetails:
    ticketServiceShortId: Text
    ticketServiceName: Text
    amount : HighPrecMoney
    allowCancellation: Bool
    amountWithCurrency: PriceAPIEntity
    status : ServiceStatus
    businessHourId : Maybe (Id BusinessHour)
    verificationCount : Int
    slot: Maybe TimeOfDay
    expiryDate : Maybe UTCTime
    categories : [TicketBookingCategoryDetails]

  TicketBookingCategoryDetails:
    id : Id TicketBookingServiceCategory
    name : Text
    bookedSeats: Int
    cancelledSeats: Maybe Int
    amount: HighPrecMoney
    amountToRefund: Maybe HighPrecMoney
    amountWithCurrency: PriceAPIEntity
    serviceCategoryId: Maybe (Text)
    peopleCategories : [TicketBookingPeopleCategoryDetails]

  TicketBookingPeopleCategoryDetails:
    id : Id TicketBookingPeopleCategory
    name : Text
    pricePerUnit : HighPrecMoney
    pricePerUnitWithCurrency: PriceAPIEntity
    numberOfUnits : Int
    numberOfUnitsCancelled : Maybe Int
    amountToRefund : Maybe HighPrecMoney
    cancelCharges: "Maybe [CancellationCharge]"

  TicketBookingUpdateSeatsReq:
    ticketServiceId: Id TicketService
    date: Day
    businessHourId: Id BusinessHour
    categoryId: Id ServiceCategory
    updatedBookedSeats: Int

  TicketServiceCancelReq:
    businessHourId : Id BusinessHour
    date : Day
    description : Maybe Text
    ticketServiceId : Id TicketService
    ticketServiceCategoryId: Id ServiceCategory

  TicketBookingCancelReq:
    ticketBookingServices: [TicketBookingServiceCancelReq]
    ticketBookingShortId: ShortId TicketBooking

  TicketBookingServiceCancelReq:
    shortId:  ShortId TicketBookingService
    businessHourId: Id BusinessHour
    serviceCategory: [TicketBookingServiceCategoryCancelReq]

  TicketBookingServiceCategoryCancelReq:
    id: Id TicketBookingServiceCategory
    visitDate: Day
    serviceCategoryId: Id ServiceCategory
    peopleCategory: [TicketBookingServicePeopleCategoryCancelReq]

  TicketBookingServicePeopleCategoryCancelReq:
    id: Id TicketBookingPeopleCategory
    quantity: Int

  TicketServiceVerificationResp:
    ticketServiceName: Maybe Text
    visitDate: Maybe Day
    validTill: Maybe UTCTime
    ticketServiceShortId: Maybe Text
    message: Text
    status: TicketVerificationStatus
    amount: Maybe HighPrecMoney
    amountWithCurrency: Maybe PriceAPIEntity
    verificationCount: Maybe Int
    startTime: Maybe TimeOfDay
    endTime: Maybe TimeOfDay
    categories: [TicketBookingCategoryDetails]

  TicketVerificationStatus:
    enum: "BookingSuccess,BookingExpired,BookingFuture,BookingAlreadyVerified,DifferentService,PaymentPending,InvalidBooking,CancelledBooking"

  PeopleCategoriesVerificationRes:
    id: Id ServicePeopleCategory
    name: Text
    pricePerUnit: HighPrecMoney
    pricePerUnitWithCurrency: PriceAPIEntity

  TicketPlaceAvailability:
    month: Int
    closedDays: [Int]

apis:
  # GET /ticket/places
  - GET:
      endpoint: /ticket/places
      response:
        type: "[TicketPlace]"

  # GET /ticket/places/{placeId}/services
  - GET:
      endpoint: /ticket/places/{placeId}/services
      auth: TokenAuth
      query:
        date: Day
      params:
        placeId: Id TicketPlace
      response:
        type: "[API.Types.UI.TicketService.TicketServiceResp]"

  # # POST /ticket/places/{placeId}/book
  - POST:
      endpoint: /ticket/places/{placeId}/book
      auth: TokenAuth
      params:
        placeId: Id TicketPlace
      request:
        type: API.Types.UI.TicketService.TicketBookingReq
      response:
        type: Kernel.External.Payment.Interface.Types.CreateOrderResp

  # # GET /ticket/bookings
  - GET:
      endpoint: /ticket/bookings
      auth: TokenAuth
      query:
        limit: Int
        offset: Int
      mandatoryQuery:
        status: BookingStatus
      response:
        type: "[API.Types.UI.TicketService.TicketBookingAPIEntity]"

  # # GET /ticket/bookings
  - GET:
      endpoint: /ticket/bookings/v2
      auth: TokenAuth
      query:
        limit: Int
        offset: Int
        status: BookingStatus
      response:
        type: "[API.Types.UI.TicketService.TicketBookingAPIEntityV2]"

  # # GET /ticket/bookings/{ticketBookingShortId}/details
  - GET:
      endpoint: /ticket/bookings/{ticketBookingShortId}/details
      auth: TokenAuth
      params:
        ticketBookingShortId: ShortId TicketBooking
      response:
        type: API.Types.UI.TicketService.TicketBookingDetails

  # # POST /ticket/bookings/{personServiceId}/{ticketServiceShortId}/verify
  - POST:
      endpoint: /ticket/bookings/{personServiceId}/{ticketServiceShortId}/verify
      auth: TokenAuth
      params:
        personServiceId: Id TicketService
        ticketServiceShortId: ShortId TicketBookingService
      response:
        type: API.Types.UI.TicketService.TicketServiceVerificationResp

  # # GET /ticket/bookings/{ticketBookingShortId}/status
  - GET:
      endpoint: /ticket/bookings/{ticketBookingShortId}/status
      auth: TokenAuth
      params:
        ticketBookingShortId: ShortId TicketBooking
      response:
        type: BookingStatus

  # POST /ticket/bookings/cancel
  - POST:
      endpoint: /ticket/booking/cancel
      auth: TokenAuth
      request:
        type: API.Types.UI.TicketService.TicketBookingCancelReq
      response:
        type: APISuccess

  # # dashboard APIs
  - POST:
      endpoint: /ticket/bookings/update/seats
      auth: TokenAuth
      request:
        type: API.Types.UI.TicketService.TicketBookingUpdateSeatsReq
      response:
        type: APISuccess

  # # cancel service /ticket/bookings/services/cancel
  - POST:
      endpoint: /ticket/service/cancel
      auth: TokenAuth
      request:
        type: API.Types.UI.TicketService.TicketServiceCancelReq
      response:
        type: APISuccess

  - GET:
      endpoint: /ticket/place/{placeId}/availability
      auth: TokenAuth
      query:
        isClosed: Bool
        forceFresh: Bool
      params:
        placeId: Id TicketPlace
      response:
        type: "[TicketPlaceAvailability]"