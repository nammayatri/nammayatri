imports:
  Journey: Domain.Types.Journey
  SearchRequest: Domain.Types.SearchRequest
  Estimate: Domain.Types.Estimate
  LocationAddress: Domain.Types.LocationAddress
  PriceAPIEntity: Kernel.Types.Common
  FRFSStationAPI: API.Types.UI.FRFSTicketService
  MultimodalTravelMode: Domain.Types.Trip
  LocationAPIEntity: Domain.Types.Location
  LegInfo: Lib.JourneyModule.Types
  JourneyLeg: Domain.Types.JourneyLeg
  LatLong: Kernel.External.Maps.Types
  LatLngV2: Kernel.External.Maps.Google.MapsClient.Types
  Price: Kernel.Types.Common
  JourneyLegStatus: Lib.JourneyLeg.Types
  UnifiedTicketQR: Lib.JourneyModule.Types
  FRFSBookingPaymentStatusAPI: API.Types.UI.FRFSTicketService
  CreateOrderResp: Kernel.External.Payment.Juspay.Types
  ExtendLegStartPoint: Lib.JourneyModule.Types
  GetFareResponse: Lib.JourneyModule.Types
  BookingUpdateRequest: Domain.Types.BookingUpdateRequest
  RouteStopMapping: Domain.Types.RouteStopMapping
  JourneyOptionsSortingType: Domain.Types.MultimodalPreferences
  FRFSQuote: Domain.Types.FRFSQuote
  AvailableRoutesByTier: Lib.JourneyModule.Utils
  VehiclePosition: Lib.JourneyModule.Types
  SDKPayloadDetails: Kernel.External.Payment.Juspay.Types
  ServiceTierType: BecknV2.FRFS.Enums
  City: Kernel.Types.Beckn.Context
  SuggestedStations: Domain.Types.StationType

module: MultimodalConfirm

types:
  JourneyInfoResp:
    estimatedDuration: Maybe Seconds
    estimatedMinFare: PriceAPIEntity
    estimatedMaxFare: PriceAPIEntity
    estimatedDistance: Distance
    journeyStatus: Domain.Types.Journey.JourneyStatus
    unifiedQR: Maybe UnifiedTicketQR
    journeyId: Id Journey
    legs: [LegInfo]
    startTime: Maybe UTCTime
    endTime: Maybe UTCTime
    merchantOperatingCityName : Maybe Text
    crisSdkToken : Maybe Text
    derive: "Show"

  JourneyInfoRespWithFare:
    journeyInfoResponse: JourneyInfoResp
    totalFare: Maybe HighPrecMoney

  LegStatus:
    legOrder: Int
    subLegOrder: Int
    status: JourneyLegStatus
    vehiclePositions: "[VehiclePosition]"
    userPosition: Maybe LatLong
    mode: MultimodalTravelMode

  JourneyStatusResp:
    journeyStatus: Domain.Types.Journey.JourneyStatus
    legs: "[LegStatus]"
    journeyPaymentStatus: Maybe FRFSBookingPaymentStatusAPI
    journeyChangeLogCounter: Int

  ExtendLegReq:
    distance: Distance
    duration: Seconds
    fare: GetFareResponse
    startLocation: ExtendLegStartPoint
    endLocation: Maybe LocationAPIEntity
    bookingUpdateRequestId: Maybe (Id BookingUpdateRequest)

  ExtendLegGetFareReq:
    startLocation: ExtendLegStartPoint
    endLocation: Maybe LocationAPIEntity

  ExtendLegGetFareResp:
    totalFare: Maybe GetFareResponse
    distance: Distance
    duration: Maybe Seconds
    bookingUpdateRequestId: Maybe (Id BookingUpdateRequest)

  MultimodalTransitOptionsReq:
    sourceLatLong: LatLong
    destLatLong: LatLong

  MultimodalTransitOptionData:
    travelModes: [MultimodalTravelMode]
    duration: Maybe Seconds

  MultimodalTransitOptionsResp:
    options: [MultimodalTransitOptionData]

  RiderLocationReq:
    latLong: LatLong
    currTime: UTCTime

  SwitchLegReq:
    newMode: MultimodalTravelMode
    legOrder: Int
    startLocation: Maybe LatLngV2
    originAddress: Maybe LocationAddress

  SwitchTaxiReq:
    estimateId: Id Estimate

  SwitchFRFSTierReq:
    quoteId: Id FRFSQuote

  JourneyBookingPaymentStatus:
    journeyId: Id Journey
    paymentOrder: Maybe PaymentOrder
    paymentFareUpdate: Maybe [PaymentFareUpdate]

  PaymentFareUpdate:
    journeyLegOrder: Int
    oldFare: PriceAPIEntity
    newFare: PriceAPIEntity

  PaymentOrder:
    sdkPayload: Maybe CreateOrderResp
    status: FRFSBookingPaymentStatusAPI

  JourneyFeedBackForm:
    rating: Maybe Int
    rateTravelMode: [RateMultiModelTravelModes]
    additionalFeedBack: Maybe Text

  MultimodalUserPreferences:
    allowedTransitModes: [MultimodalTravelMode]
    journeyOptionsSortingType: Maybe JourneyOptionsSortingType
    busTransitTypes: Maybe [ServiceTierType]
    subwayTransitTypes: Maybe [ServiceTierType]

  RateMultiModelTravelModes:
    travelMode: Maybe MultimodalTravelMode
    isExperienceGood: Maybe Bool
    legOrder: Int

  JourneyConfirmReq:
    journeyConfirmReqElements: "[JourneyConfirmReqElement]"

  JourneyConfirmReqElement:
    journeyLegOrder: Int
    skipBooking: Bool
    ticketQuantity: Maybe Int
    childTicketQuantity: Maybe Int
    crisSdkResponse: Maybe CrisSdkResponse

  CrisSdkResponse:
    osType: Text
    osBuildVersion: Text
    bookAuthCode: Text

  LegServiceTierOptionsResp:
    options: "[AvailableRoutesByTier]"

  TransportRoute:
    cd: Text
    sN: Text
    lN: Text
    dTC: Maybe Int
    stC: Maybe Int
    vt: Text
    clr: Maybe Text

  TransportStation:
    cd: Text
    nm: Text
    lt: Double
    ln: Double
    vt: Text
    ad: Maybe Text
    rgn: Maybe Text
    hin: Maybe Text
    sgstdDest: Maybe [SuggestedStations]

  TransportRouteStopMapping:
    rc: Text
    sc: Text
    sn: Int

  PublicTransportData:
    rs: [TransportRoute]
    ss: [TransportStation]
    rsm: [TransportRouteStopMapping]
    ptcv: Text

  UpdatePaymentOrderReq:
    quantity: Int
    childTicketQuantity: Int

  UpdatePaymentOrderResp:
    sdkPayload: Maybe SDKPayloadDetails

apis:
  - POST:
      endpoint: /multimodal/{journeyId}/initiate
      params:
        journeyId: Id Journey
      response:
        type: JourneyInfoResp
  - POST:
      endpoint: /multimodal/{journeyId}/confirm
      params:
        journeyId: Id Journey
      request:
        type: JourneyConfirmReq
      query:
        forceBookLegOrder: Int
      response:
        type: Kernel.Types.APISuccess.APISuccess
  - GET:
      endpoint: /multimodal/{journeyId}/booking/info
      params:
        journeyId: Id Journey
      response:
        type: JourneyInfoResp
  - GET:
      endpoint: /multimodal/{journeyId}/booking/paymentStatus
      params:
        journeyId: Id Journey
      response:
        type: JourneyBookingPaymentStatus
  - POST:
      endpoint : /multimodal/{journeyId}/payment/updateOrder
      auth: TokenAuth
      request:
        type: UpdatePaymentOrderReq
      params:
        journeyId: Id Journey
      response:
        type: UpdatePaymentOrderResp

  - POST:
      endpoint: /multimodal/{journeyId}/switch # combine with other legs if they match
      params:
        journeyId: Id Journey
      request:
        type: SwitchLegReq
      response:
        type: Kernel.Types.APISuccess.APISuccess # send new leg

  - POST:
      endpoint: multimodal/journey/{journeyId}/leg/{legOrder}/skip
      params:
        journeyId: Id Journey
        legOrder: Int
      response:
        type: Kernel.Types.APISuccess.APISuccess

  - POST:
      endpoint: multimodal/journey/{journeyId}/leg/{legOrder}/addSkippedLeg
      params:
        journeyId: Id Journey
        legOrder: Int
      response:
        type: Kernel.Types.APISuccess.APISuccess

  - POST:
      endpoint: /multimodal/extend/{journeyId}/leg # only applicable for current leg
      request:
        type: ExtendLegReq
      params:
        journeyId: Id Journey
      response:
        type: Kernel.Types.APISuccess.APISuccess

  - POST:
      endpoint: /multimodal/extend/{journeyId}/leg/getfare # only applicable for current leg
      request:
        type: ExtendLegGetFareReq
      params:
        journeyId: Id Journey
      response:
        type: ExtendLegGetFareResp

  - GET:
      endpoint: /multimodal/journey/{journeyId}/status
      params:
        journeyId: Id Journey
      response:
        type: JourneyStatusResp

  - POST:
      endpoint: multimodal/journey/{journeyId}/cancel
      params:
        journeyId: Id Journey
      response:
        type: Kernel.Types.APISuccess.APISuccess

  - POST:
      endpoint: multimodal/{journeyId}/rider/location
      params:
        journeyId: Id Journey
      request:
        type: RiderLocationReq
      response:
        type: JourneyStatusResp

  - POST:
      endpoint: multimodal/{journeyId}/order/{legOrder}/switchTaxi
      params:
        journeyId: Id Journey
        legOrder: Int
      request:
        type: SwitchTaxiReq
      response:
        type: JourneyInfoResp

  - POST:
      endpoint: multimodal/{journeyId}/order/{legOrder}/switchFRFSTier
      params:
        journeyId: Id Journey
        legOrder: Int
      request:
        type: SwitchFRFSTierReq
      response:
        type: JourneyInfoRespWithFare

  - POST:
      endpoint: multimodal/{journeyId}/journeyFeedback
      params:
        journeyId: Id Journey
      request:
        type: JourneyFeedBackForm
      response:
        type: Kernel.Types.APISuccess.APISuccess

  - GET:
      endpoint: multimodal/{journeyId}/feedback
      params:
        journeyId: Id Journey
      response:
        type: (Maybe JourneyFeedBackForm)

  - GET:
      endpoint: multimodal/user/preferences
      response:
        type: MultimodalUserPreferences

  - POST:
      endpoint: multimodal/user/preferences
      request:
        type: MultimodalUserPreferences
      response:
        type: Kernel.Types.APISuccess.APISuccess

  - POST:
      endpoint: multimodal/transitOptions/lite
      request:
        type: MultimodalTransitOptionsReq
      response:
        type: MultimodalTransitOptionsResp

  - GET:
      endpoint: /publicTransport/data
      query:
        publicTransportConfigVersion: Text
        city: City
      response:
        type: PublicTransportData

  - GET:
      endpoint: /multimodal/{journeyId}/order/{legOrder}/getLegTierOptions
      params:
        journeyId: Id Journey
        legOrder: Int
      response:
        type: LegServiceTierOptionsResp